{
  "swagger": "2.0",
  "info" : {
    "description" : "relative path : maps/rest",
    "version" : "7.0-SNAPSHOT",
    "title" : "MaPS rest api 3.7 API specification"
  },
  "host" : "is-dev2.brandmaker.com",
  "basePath" : "/maps/rest",
  "schemes" : ["https"],
  "tags" : [
    {
      "name" : "\/api/{version}/approver"
    }
    ,
    {
      "name" : "\/api/{version}/approver/{userId}"
    }
    ,
    {
      "name" : "\/api/{version}/attachment/bill/node/{nodeId}"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/attachment/content/{attachmentId}"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/attachment/download/{attachmentId}"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/attachment/externalIds"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/attachment/node/{nodeId}"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/attachment/sunk-cost/node/{nodeId}"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/attachment/unlink/{attachmentId}"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/attachment/{attachmentId}"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/basic-search"
    }
    ,
    {
      "name" : "\/api/{version}/budget-set/public/all"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/budget/node/{nodeId}/tree/{treeId}"
      ,
      "description" : "Return budget values of months, year, quarter, for planned,committed,actual,projected,remaining,mdf."
    }
    ,
    {
      "name" : "\/api/{version}/budget/planned/month/node/{nodeId}/tree/{treeId}"
      ,
      "description" : "Edit PLANNED month budget of node for given year."
    }
    ,
    {
      "name" : "\/api/{version}/budget/planned/year/node/{nodeId}/tree/{treeId}"
      ,
      "description" : "Edit PLANNED year budget of node for given year."
    }
    ,
    {
      "name" : "\/api/{version}/budgetSet/public/all"
      ,
      "description" : "Returns all public budget sets."
    }
    ,
    {
      "name" : "\/api/{version}/category"
    }
    ,
    {
      "name" : "\/api/{version}/category/all"
    }
    ,
    {
      "name" : "\/api/{version}/category/{categoryId}"
    }
    ,
    {
      "name" : "\/api/{version}/comment/node/{nodeId}"
    }
    ,
    {
      "name" : "\/api/{version}/comment/{id}"
    }
    ,
    {
      "name" : "\/api/{version}/content/node/{nodeId}"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/content/period/{periodId}"
      ,
      "description" : "Create/Update content."
    }
    ,
    {
      "name" : "\/api/{version}/content/slideshow"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/content/slideshow/url"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/content/{periodId}"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/currency"
    }
    ,
    {
      "name" : "\/api/{version}/dimension"
    }
    ,
    {
      "name" : "\/api/{version}/dimension/node/{nodeId}"
      ,
      "description" : "Return all dimension values for given node."
    }
    ,
    {
      "name" : "\/api/{version}/dimension/{dimId}/node/{nodeId}"
    }
    ,
    {
      "name" : "\/api/{version}/dimension/{id}"
    }
    ,
    {
      "name" : "\/api/{version}/dimension/{id}/possible-values"
      ,
      "description" : "Get dimension possible values for given dimension."
    }
    ,
    {
      "name" : "\/api/{version}/exchange-rate/tree/{treeId}/currency/{currencyId}"
    }
    ,
    {
      "name" : "\/api/{version}/fee"
    }
    ,
    {
      "name" : "\/api/{version}/fee-rate/tree/{treeId}"
      ,
      "description" : "Create rates for given year(tree) and fee."
    }
    ,
    {
      "name" : "\/api/{version}/fee-rate/tree/{treeId}/fee/{feeId}"
      ,
      "description" : "Delete fee rate."
    }
    ,
    {
      "name" : "\/api/{version}/fee-rate/tree/{treeId}/month/{month}"
      ,
      "description" : "Get rates for given year and month."
    }
    ,
    {
      "name" : "\/api/{version}/fee-rate/{rateId}"
    }
    ,
    {
      "name" : "\/api/{version}/fee/node/{nodeId}"
      ,
      "description" : "Get assigned fees to the node."
    }
    ,
    {
      "name" : "\/api/{version}/fee/type"
    }
    ,
    {
      "name" : "\/api/{version}/fee/{feeId}"
    }
    ,
    {
      "name" : "\/api/{version}/fee/{feeId}/node/{nodeId}"
    }
    ,
    {
      "name" : "\/api/{version}/fee/{feeId}/node/{nodeId}/tree/{treeId}"
      ,
      "description" : "Get fee rates for given fee, node and tree(year)."
    }
    ,
    {
      "name" : "\/api/{version}/group"
    }
    ,
    {
      "name" : "\/api/{version}/group/node/{nodeId}"
    }
    ,
    {
      "name" : "\/api/{version}/group/{id}"
    }
    ,
    {
      "name" : "\/api/{version}/invoice/link/{invoiceId}"
      ,
      "description" : "Link invoice to sunk cost."
    }
    ,
    {
      "name" : "\/api/{version}/invoice/linkAttachment/{invoiceId}"
    }
    ,
    {
      "name" : "\/api/{version}/invoice/linked/sunk-cost/{sunkCostId}"
      ,
      "description" : "Returns invoices linked to given sunk cost and tree."
    }
    ,
    {
      "name" : "\/api/{version}/invoice/node/{nodeId}"
    }
    ,
    {
      "name" : "\/api/{version}/invoice/unlink/{invoiceId}"
      ,
      "description" : "Unlink invoice from sunk cost."
    }
    ,
    {
      "name" : "\/api/{version}/invoice/{id}"
    }
    ,
    {
      "name" : "\/api/{version}/kpi-definition"
    }
    ,
    {
      "name" : "\/api/{version}/kpi-definition/system"
      ,
      "description" : "return names of system kpis that can be used : 'sumBills', 'sumBudgets', 'sumEstimates', 'sumProjected', 'sumRemaining', 'sumMDF', 'sumTarget'."
    }
    ,
    {
      "name" : "\/api/{version}/kpi-definition/{kpiDefinitionId}"
    }
    ,
    {
      "name" : "\/api/{version}/kpi/node/{nodeId}"
    }
    ,
    {
      "name" : "\/api/{version}/kpi/node/{nodeId}/kpi-definition/{kpiDefinitionId}"
    }
    ,
    {
      "name" : "\/api/{version}/kpi/{kpiId}"
    }
    ,
    {
      "name" : "\/api/{version}/managed-task"
      ,
      "description" : "*Create managed task."
    }
    ,
    {
      "name" : "\/api/{version}/managed-task/job/{jobId}"
      ,
      "description" : "Returns managed task by given jobId(job manager's job id)."
    }
    ,
    {
      "name" : "\/api/{version}/managed-task/{taskId}"
      ,
      "description" : "Edit managed task's responsible person, marker type and description."
    }
    ,
    {
      "name" : "\/api/{version}/marker"
      ,
      "description" : "."
    }
    ,
    {
      "name" : "\/api/{version}/marker-categories"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/marker-categories/{categoryId}"
      ,
      "description" : "Delete marker category."
    }
    ,
    {
      "name" : "\/api/{version}/marker/node/{nodeId}"
    }
    ,
    {
      "name" : "\/api/{version}/markers"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/markers/download/{markerId}"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/mdf"
      ,
      "description" : "Returns MDFs that are assigned to approver(if the user is approver)."
    }
    ,
    {
      "name" : "\/api/{version}/mdf/approve/{mdfId}"
      ,
      "description" : "approve requested mdf or update already approved mdf."
    }
    ,
    {
      "name" : "\/api/{version}/mdf/grant/node/{nodeId}"
      ,
      "description" : "create approved (grant) mdf."
    }
    ,
    {
      "name" : "\/api/{version}/mdf/node/{nodeId}"
    }
    ,
    {
      "name" : "\/api/{version}/mdf/reject/{mdfId}"
    }
    ,
    {
      "name" : "\/api/{version}/mdf/request/node/{nodeId}"
      ,
      "description" : "request new mdf with status 'PENDING'."
    }
    ,
    {
      "name" : "\/api/{version}/mdf/request/{mdfId}"
      ,
      "description" : "request again rejected mdf."
    }
    ,
    {
      "name" : "\/api/{version}/mdf/requested"
      ,
      "description" : "Returns MDFs that are requested by the user."
    }
    ,
    {
      "name" : "\/api/{version}/mdf/{id}"
    }
    ,
    {
      "name" : "\/api/{version}/mdf/{mdfId}/comment"
    }
    ,
    {
      "name" : "\/api/{version}/module/all"
      ,
      "description" : "Returns module codes which are defined in Maps as Subnavigation entries - Calendar view, Budget view and so on."
    }
    ,
    {
      "name" : "\/api/{version}/module/generate-link"
      ,
      "description" : "Generates link per module(optional) and view(optional)."
    }
    ,
    {
      "name" : "\/api/{version}/node-type"
      ,
      "description" : "Return active node types to use in node creation/edit."
    }
    ,
    {
      "name" : "\/api/{version}/node-type/icons"
      ,
      "description" : "Return all available icons for node types."
    }
    ,
    {
      "name" : "\/api/{version}/node-type/icons/download/{typeId}"
    }
    ,
    {
      "name" : "\/api/{version}/node/child/{nodeId}/from-tree/{fromTreeId}/to-tree/{toTreeId}"
      ,
      "description" : "Returns children for given node between start date from."
    }
    ,
    {
      "name" : "\/api/{version}/node/externalId/{externalId}"
    }
    ,
    {
      "name" : "\/api/{version}/node/managed-task/{managedTaskJobId}"
      ,
      "description" : "Return Node information."
    }
    ,
    {
      "name" : "\/api/{version}/node/root/{treeId}"
    }
    ,
    {
      "name" : "\/api/{version}/node/user-assigned"
      ,
      "description" : "Returns nodes of the user where the user is assigned like responsible user of the node."
    }
    ,
    {
      "name" : "\/api/{version}/node/{id}"
    }
    ,
    {
      "name" : "\/api/{version}/node/{nodeId}"
      ,
      "description" : "If the dates extend parent node, it will be resized automatically."
    }
    ,
    {
      "name" : "\/api/{version}/node/{nodeId}/copy/{parentId}"
      ,
      "description" : "Copy node to parent."
    }
    ,
    {
      "name" : "\/api/{version}/node/{nodeId}/deeplink"
      ,
      "description" : "Return deeplink for calendar and budget views."
    }
    ,
    {
      "name" : "\/api/{version}/node/{nodeId}/move/{parentId}"
      ,
      "description" : "Move node to parent."
    }
    ,
    {
      "name" : "\/api/{version}/node/{parentId}"
      ,
      "description" : "Create node or child node."
    }
    ,
    {
      "name" : "\/api/{version}/period/node/{nodeId}"
    }
    ,
    {
      "name" : "\/api/{version}/period/node/{nodeId}/tree/{treeId}"
      ,
      "description" : "Returns period data of node for given tree(year)."
    }
    ,
    {
      "name" : "\/api/{version}/period/{id}"
    }
    ,
    {
      "name" : "\/api/{version}/permissions/global/current-user"
    }
    ,
    {
      "name" : "\/api/{version}/permissions/node/{nodeId}"
    }
    ,
    {
      "name" : "\/api/{version}/permissions/rights/current-user"
    }
    ,
    {
      "name" : "\/api/{version}/sunk-cost/link/{sunkCostId}"
      ,
      "description" : "Link invoices to sunk cost."
    }
    ,
    {
      "name" : "\/api/{version}/sunk-cost/linkAttachment/{sunkCostId}"
    }
    ,
    {
      "name" : "\/api/{version}/sunk-cost/linked/invoice/{invoiceId}"
    }
    ,
    {
      "name" : "\/api/{version}/sunk-cost/node/{nodeId}"
    }
    ,
    {
      "name" : "\/api/{version}/sunk-cost/unlink/{sunkCostId}"
      ,
      "description" : "Unlink invoices from sunk cost."
    }
    ,
    {
      "name" : "\/api/{version}/sunk-cost/{id}"
    }
    ,
    {
      "name" : "\/api/{version}/target-budget/node/{nodeId}"
    }
    ,
    {
      "name" : "\/api/{version}/target-budget/{id}"
    }
    ,
    {
      "name" : "\/api/{version}/task/changes"
    }
    ,
    {
      "name" : "\/api/{version}/task/node/{nodeId}"
    }
    ,
    {
      "name" : "\/api/{version}/task/node/{nodeId}/status/{status}/date/{date}"
      ,
      "description" : "Returns tasks and managed tasks of node by date and status, paginated."
    }
    ,
    {
      "name" : "\/api/{version}/task/user-assigned"
      ,
      "description" : "Returns the tasks of the user where the user is assigned like responsible user."
    }
    ,
    {
      "name" : "\/api/{version}/task/{taskId}"
    }
    ,
    {
      "name" : "\/api/{version}/tree"
    }
    ,
    {
      "name" : "\/api/{version}/user/access/node/{nodeId}"
      ,
      "description" : "get users that have READ access to given nodeId."
    }
    ,
    {
      "name" : "\/api/{version}/user/access/task/{taskId}"
      ,
      "description" : "get users that have READ access to given taskId."
    }
    ,
    {
      "name" : "\/api/{version}/user/has-data/{userId}"
      ,
      "description" : "check if given user has any data in application."
    }
    ,
    {
      "name" : "\/api/{version}/user/has-module-access"
      ,
      "description" : "Return if the user has access to Maps module, {'access':true/false}."
    }
    ,
    {
      "name" : "\/api/{version}/user/write/attachments"
    }
    ,
    {
      "name" : "\/api/{version}/usergroups/all"
      ,
      "description" : "Returns All users with assigned user groups,."
    }
    ,
    {
      "name" : "\/api/{version}/usergroups/user/{userId}"
    }
    ,
    {
      "name" : "\/api/{version}/view/public/all"
      ,
      "description" : "Returns all public views."
    }
    ,
    {
      "name" : "\/api/{version}/watcher/node/{nodeId}"
      ,
      "description" : "Returns all watchers on an element."
    }
    ,
    {
      "name" : "\/api/{version}/watcher/node/{nodeId}/user/{userId}"
      ,
      "description" : "Created by alexander."
    }
    ,
    {
      "name" : "\/api/{version}/watcher/user-assigned"
      ,
      "description" : "Returns all elements that a user watches."
    }
  ],
  "definitions" : {
    "json_AnalysisType" : {
      "type" : "string",
      "title" : "AnalysisType",
          "enum" : [
            "lessIsBetter",
            "moreIsBetter",
            "none"
          ],
      "description" : ""
    }
    ,
    "json_AncestorsDTO" : {
      "type" : "object",
      "title" : "AncestorsDTO",
          "properties" : {
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "id" : 12345,
  "name" : "..."
},
      "description" : "Created by alexander.yordanov on 2019-09-17."
    }
    ,
    "json_AnnexContentViewBase" : {
      "type" : "object",
      "title" : "AnnexContentViewBase",
      "required" : ["published"],
          "properties" : {
            "text" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "published" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "contentId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "text" : "...",
  "published" : true,
  "contentId" : 12345
},
      "description" : ""
    }
    ,
    "json_AnnexPeriodViewBase" : {
      "type" : "object",
      "title" : "AnnexPeriodViewBase",
          "properties" : {
            "categoryId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "endDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "startDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "categoryId" : 12345,
  "endDate" : "...",
  "startDate" : "...",
  "name" : "...",
  "id" : 12345
},
      "description" : ""
    }
    ,
    "json_AttachmentDTO" : {
      "type" : "object",
      "title" : "AttachmentDTO",
          "properties" : {
            "annexAttachmentId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "urlId" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "attachmentDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "fileSize" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "comment" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "externalId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "attachmentFileName" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "source" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "attachmentLink" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "annexAttachmentId" : 12345,
  "urlId" : "...",
  "attachmentDate" : "...",
  "fileSize" : 12345,
  "comment" : "...",
  "externalId" : 12345,
  "attachmentFileName" : "...",
  "source" : "...",
  "attachmentLink" : "..."
},
      "description" : "Created by alexander.yordanov on 2017-10-20."
    }
    ,
    "json_BMCurrencyView" : {
      "type" : "object",
      "title" : "BMCurrencyView",
          "properties" : {
            "symbol" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "shortName" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "symbol" : "...",
  "id" : 12345,
  "shortName" : "..."
},
      "description" : ""
    }
    ,
    "json_BMonthDTO" : {
      "type" : "object",
      "title" : "BMonthDTO",
          "properties" : {
            "planned" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            },
            "commited" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            },
            "actual" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            },
            "projected" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            },
            "remainig" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            },
            "mdf" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            },
            "calculated" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            },
            "target" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            }
          },
      "example" : {
  "planned" : [ 12345.0, 12345.0 ],
  "commited" : [ 12345.0, 12345.0 ],
  "actual" : [ 12345.0, 12345.0 ],
  "projected" : [ 12345.0, 12345.0 ],
  "remainig" : [ 12345.0, 12345.0 ],
  "mdf" : [ 12345.0, 12345.0 ],
  "calculated" : [ 12345.0, 12345.0 ],
  "target" : [ 12345.0, 12345.0 ]
},
      "description" : ""
    }
    ,
    "json_BQuarterDTO" : {
      "type" : "object",
      "title" : "BQuarterDTO",
          "properties" : {
            "planned" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            },
            "commited" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            },
            "actual" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            },
            "projected" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            },
            "remainig" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            },
            "mdf" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            },
            "calculated" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            },
            "target" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            }
          },
      "example" : {
  "planned" : [ 12345.0, 12345.0 ],
  "commited" : [ 12345.0, 12345.0 ],
  "actual" : [ 12345.0, 12345.0 ],
  "projected" : [ 12345.0, 12345.0 ],
  "remainig" : [ 12345.0, 12345.0 ],
  "mdf" : [ 12345.0, 12345.0 ],
  "calculated" : [ 12345.0, 12345.0 ],
  "target" : [ 12345.0, 12345.0 ]
},
      "description" : "Quarter budget"
    }
    ,
    "json_BYearDTO" : {
      "type" : "object",
      "title" : "BYearDTO",
          "properties" : {
            "planned" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "commited" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "actual" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "projected" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "remainig" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "mdf" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "target" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "calculated" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            }
          },
      "example" : {
  "planned" : 12345.0,
  "commited" : 12345.0,
  "actual" : 12345.0,
  "projected" : 12345.0,
  "remainig" : 12345.0,
  "mdf" : 12345.0,
  "target" : 12345.0,
  "calculated" : 12345.0
},
      "description" : ""
    }
    ,
    "json_BillDTO" : {
      "type" : "object",
      "title" : "BillDTO",
          "properties" : {
            "costCenter" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "amount" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "referenceNumber" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "date" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "supplier" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "number" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "costType" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "jobNumber" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "responsiblePerson" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "paid" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "note" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "bookingDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            }
          },
      "example" : {
  "costCenter" : "...",
  "amount" : 12345.0,
  "referenceNumber" : "...",
  "date" : "...",
  "supplier" : "...",
  "number" : "...",
  "name" : "...",
  "id" : 12345,
  "costType" : "...",
  "jobNumber" : "...",
  "responsiblePerson" : "...",
  "paid" : true,
  "note" : "...",
  "bookingDate" : "..."
},
      "description" : "Created by alexander.yordanov on 2017-10-10."
    }
    ,
    "json_BudgetColumnDTO" : {
      "type" : "object",
      "title" : "BudgetColumnDTO",
          "properties" : {
            "order" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "negativeFont" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "columnType" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_ColumnType"
            },
            "activeColumns" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_ColumnOrder"
}
            },
            "formulaReadable" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "dimensionId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "negativeBackground" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "positiveFont" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "positiveBackground" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "formula" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "width" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "order" : 12345,
  "negativeFont" : "...",
  "columnType" : "YEAR_BUDGET",
  "activeColumns" : [ "REMAINING", "PROJECTED" ],
  "formulaReadable" : "...",
  "dimensionId" : 12345,
  "negativeBackground" : "...",
  "positiveFont" : "...",
  "id" : 12345,
  "positiveBackground" : "...",
  "formula" : "...",
  "width" : 12345
},
      "description" : "Created by alexander.yordanov on 2020-05-18."
    }
    ,
    "json_BudgetColumnViewBase" : {
      "type" : "object",
      "title" : "BudgetColumnViewBase",
          "properties" : {
            "formula" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "negativeBackground" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "order" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "positiveBackground" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "negativeFont" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "columnType" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_ColumnType"
            },
            "dimensionId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "width" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "activeColumns" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_ColumnOrder"
}
            },
            "positiveFont" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "formula" : "...",
  "negativeBackground" : "...",
  "order" : 12345,
  "positiveBackground" : "...",
  "id" : 12345,
  "negativeFont" : "...",
  "columnType" : "NODE_NOTES",
  "dimensionId" : 12345,
  "width" : 12345,
  "activeColumns" : [ "ACTUAL", "TARGET_BUDGET" ],
  "positiveFont" : "..."
},
      "description" : ""
    }
    ,
    "json_BudgetColumnsDTO" : {
      "type" : "object",
      "title" : "BudgetColumnsDTO",
          "properties" : {
            "month" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_BMonthDTO"
            },
            "quarter" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_BQuarterDTO"
            },
            "year" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_BYearDTO"
            }
          },
      "example" : {
  "month" : {
    "planned" : [ 12345.0, 12345.0 ],
    "commited" : [ 12345.0, 12345.0 ],
    "actual" : [ 12345.0, 12345.0 ],
    "projected" : [ 12345.0, 12345.0 ],
    "remainig" : [ 12345.0, 12345.0 ],
    "mdf" : [ 12345.0, 12345.0 ],
    "calculated" : [ 12345.0, 12345.0 ],
    "target" : [ 12345.0, 12345.0 ]
  },
  "quarter" : {
    "planned" : [ 12345.0, 12345.0 ],
    "commited" : [ 12345.0, 12345.0 ],
    "actual" : [ 12345.0, 12345.0 ],
    "projected" : [ 12345.0, 12345.0 ],
    "remainig" : [ 12345.0, 12345.0 ],
    "mdf" : [ 12345.0, 12345.0 ],
    "calculated" : [ 12345.0, 12345.0 ],
    "target" : [ 12345.0, 12345.0 ]
  },
  "year" : {
    "planned" : 12345.0,
    "commited" : 12345.0,
    "actual" : 12345.0,
    "projected" : 12345.0,
    "remainig" : 12345.0,
    "mdf" : 12345.0,
    "target" : 12345.0,
    "calculated" : 12345.0
  }
},
      "description" : ""
    }
    ,
    "json_BudgetScale" : {
      "type" : "string",
      "title" : "BudgetScale",
          "enum" : [
            "NORMAL",
            "THOUSANDS",
            "MILLIONS",
            "BILLIONS"
          ],
      "description" : ""
    }
    ,
    "json_BudgetSetDTO" : {
      "type" : "object",
      "title" : "BudgetSetDTO",
          "properties" : {
            "yearSwitch" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "budgetColumns" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_BudgetColumnDTO"
}
            },
            "rounding" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "setId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "configurationInfo" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "currencyView" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_CurrencyView"
            },
            "budgetScale" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_BudgetScale"
            }
          },
      "example" : {
  "yearSwitch" : true,
  "budgetColumns" : [ {
    "order" : 12345,
    "negativeFont" : "...",
    "columnType" : "RESPONSIBLE_PERSON",
    "activeColumns" : [ "ACTUAL", "REMAINING" ],
    "formulaReadable" : "...",
    "dimensionId" : 12345,
    "negativeBackground" : "...",
    "positiveFont" : "...",
    "id" : 12345,
    "positiveBackground" : "...",
    "formula" : "...",
    "width" : 12345
  }, {
    "order" : 12345,
    "negativeFont" : "...",
    "columnType" : "DIMENSION",
    "activeColumns" : [ "TARGET_BUDGET", "TARGET_BUDGET" ],
    "formulaReadable" : "...",
    "dimensionId" : 12345,
    "negativeBackground" : "...",
    "positiveFont" : "...",
    "id" : 12345,
    "positiveBackground" : "...",
    "formula" : "...",
    "width" : 12345
  } ],
  "rounding" : true,
  "name" : "...",
  "setId" : 12345,
  "configurationInfo" : true,
  "currencyView" : "WORKING",
  "budgetScale" : "MILLIONS"
},
      "description" : "Created by alexander.yordanov on 2020-05-18."
    }
    ,
    "json_BudgetSetViewBase" : {
      "type" : "object",
      "title" : "BudgetSetViewBase",
          "properties" : {
            "budgetColumns" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_BudgetColumnViewBase"
}
            },
            "rounding" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "budgetScale" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_BudgetScale"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "setId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "configurationInfo" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "yearSwitch" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "currencyView" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_CurrencyView"
            }
          },
      "example" : {
  "budgetColumns" : [ {
    "formula" : "...",
    "negativeBackground" : "...",
    "order" : 12345,
    "positiveBackground" : "...",
    "id" : 12345,
    "negativeFont" : "...",
    "columnType" : "NODE_TYPE",
    "dimensionId" : 12345,
    "width" : 12345,
    "activeColumns" : [ "MDF", "ACTUAL" ],
    "positiveFont" : "..."
  }, {
    "formula" : "...",
    "negativeBackground" : "...",
    "order" : 12345,
    "positiveBackground" : "...",
    "id" : 12345,
    "negativeFont" : "...",
    "columnType" : "NODE_NOTES",
    "dimensionId" : 12345,
    "width" : 12345,
    "activeColumns" : [ "REMAINING", "COMMITED" ],
    "positiveFont" : "..."
  } ],
  "rounding" : true,
  "budgetScale" : "NORMAL",
  "name" : "...",
  "setId" : 12345,
  "configurationInfo" : true,
  "yearSwitch" : true,
  "currencyView" : "WORKING"
},
      "description" : ""
    }
    ,
    "json_CategoryViewBase" : {
      "type" : "object",
      "title" : "CategoryViewBase",
      "required" : ["active"],
          "properties" : {
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "categoryId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "color" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "active" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            }
          },
      "example" : {
  "name" : "...",
  "categoryId" : 12345,
  "color" : "...",
  "active" : true
},
      "description" : ""
    }
    ,
    "json_ColumnOrder" : {
      "type" : "string",
      "title" : "ColumnOrder",
          "enum" : [
            "PLANNED",
            "TARGET_BUDGET",
            "COMMITED",
            "ACTUAL",
            "PROJECTED",
            "REMAINING",
            "MDF"
          ],
      "description" : ""
    }
    ,
    "json_ColumnType" : {
      "type" : "string",
      "title" : "ColumnType",
          "enum" : [
            "YEAR_BUDGET",
            "MONTH_BUDGET",
            "CURRENCY",
            "BUDGET_ANALYSIS",
            "ELEMENT_ID",
            "NODE_TYPE",
            "NODE_NOTES",
            "RESPONSIBLE_PERSON",
            "DURATION",
            "EXTERNAL_ID",
            "DIMENSION",
            "FORMULA"
          ],
      "description" : ""
    }
    ,
    "json_CreateNodeRequestBody" : {
      "type" : "object",
      "title" : "CreateNodeRequestBody",
          "properties" : {
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "startDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "endDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "nodeTypeId" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "info" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "respPerson" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_UserViewBase"
            },
            "currencyId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "externalId" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "name" : "...",
  "startDate" : "...",
  "endDate" : "...",
  "nodeTypeId" : "...",
  "info" : "...",
  "respPerson" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "currencyId" : 12345,
  "externalId" : "..."
},
      "description" : ""
    }
    ,
    "json_CurrencyView" : {
      "type" : "string",
      "title" : "CurrencyView",
          "enum" : [
            "WORKING",
            "REFERENCE"
          ],
      "description" : ""
    }
    ,
    "json_DimensionNodeValueDTO" : {
      "type" : "object",
      "title" : "DimensionNodeValueDTO",
          "properties" : {
            "dimensionId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "dimensionType" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_DimensionTypes"
            },
            "values" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_DimensionValueViewBase"
}
            }
          },
      "example" : {
  "dimensionId" : 12345,
  "dimensionType" : "MW_SELECTABLE_DIMENSION_TYPE",
  "values" : [ {
    "value" : "...",
    "id" : 12345,
    "weight" : 12345.0
  }, {
    "value" : "...",
    "id" : 12345,
    "weight" : 12345.0
  } ]
},
      "description" : ""
    }
    ,
    "json_DimensionPossibleValueDTO" : {
      "type" : "object",
      "title" : "DimensionPossibleValueDTO",
          "properties" : {
            "parentValueId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "value" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "valueId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "parentValueId" : 12345,
  "value" : "...",
  "valueId" : 12345
},
      "description" : ""
    }
    ,
    "json_DimensionTypes" : {
      "type" : "string",
      "title" : "DimensionTypes",
          "enum" : [
            "TEXT_DIMENSION_TYPE",
            "M_SELECTABLE_DIMENSION_TYPE",
            "SELECTABLE_DIMENSION_TYPE",
            "MW_SELECTABLE_DIMENSION_TYPE",
            "STRUCTURED_TEXT_DIMENSION_TYPE",
            "CONTINUES_TEXT_DIMENSION_TYPE"
          ],
      "description" : ""
    }
    ,
    "json_DimensionValueViewBase" : {
      "type" : "object",
      "title" : "DimensionValueViewBase",
          "properties" : {
            "value" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "weight" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            }
          },
      "example" : {
  "value" : "...",
  "id" : 12345,
  "weight" : 12345.0
},
      "description" : ""
    }
    ,
    "json_DimensionViewBase" : {
      "type" : "object",
      "title" : "DimensionViewBase",
      "required" : ["required", "inheritable", "readOnly", "archived", "copyable"],
          "properties" : {
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "type" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_DimensionTypes"
            },
            "required" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "inheritable" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "readOnly" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "archived" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyable" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "info" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "id" : 12345,
  "type" : "TEXT_DIMENSION_TYPE",
  "required" : true,
  "inheritable" : true,
  "name" : "...",
  "readOnly" : true,
  "archived" : true,
  "copyable" : true,
  "info" : "..."
},
      "description" : ""
    }
    ,
    "json_EditMTaskRequestBody" : {
      "type" : "object",
      "title" : "EditMTaskRequestBody",
          "properties" : {
            "responsibleUserId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "markerType" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "responsibleUserId" : 12345,
  "markerType" : 12345
},
      "description" : ""
    }
    ,
    "json_EditNodeRequestBody" : {
      "type" : "object",
      "title" : "EditNode",
          "properties" : {
            "startDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "endDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "externalId" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "nodeName" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "responsiblePerson" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_UserViewBase"
            },
            "generalNote" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "currencyId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "nodeTypeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "startDate" : "...",
  "endDate" : "...",
  "externalId" : "...",
  "nodeName" : "...",
  "responsiblePerson" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "generalNote" : "...",
  "currencyId" : 12345,
  "nodeTypeId" : 12345
},
      "description" : ""
    }
    ,
    "json_EditTaskRequestBody" : {
      "type" : "object",
      "title" : "EditTaskRequestBody",
          "properties" : {
            "responsibleUser" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_UserViewBase"
            },
            "markerType" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "date" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "state" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "info" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "responsibleUser" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "markerType" : 12345,
  "name" : "...",
  "date" : "...",
  "state" : "...",
  "info" : "..."
},
      "description" : ""
    }
    ,
    "json_ElementTypeViewBase" : {
      "type" : "object",
      "title" : "ElementTypeViewBase",
      "required" : ["predefined"],
          "properties" : {
            "predefined" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "base64File" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "fileType" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "fileId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "predefined" : true,
  "base64File" : "...",
  "id" : 12345,
  "fileType" : "...",
  "fileId" : 12345
},
      "description" : ""
    }
    ,
    "json_ExchangeRateDTO" : {
      "type" : "object",
      "title" : "ExchangeRateDTO",
          "properties" : {
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "currencyId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "referenceCurrencyId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "exchangeRate" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "units" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "id" : 12345,
  "currencyId" : 12345,
  "referenceCurrencyId" : 12345,
  "exchangeRate" : 12345.0,
  "units" : 12345
},
      "description" : ""
    }
    ,
    "json_FeeNodeRatesDTO" : {
      "type" : "object",
      "title" : "FeeNodeRatesDTO",
          "properties" : {
            "treeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "rates" : {
            "readOnly" : false,
"description" : "",
"type" : "object",
"additionalProperties" : {
  "$ref" : "#/definitions/json_FeeRateDTO"
}
            },
            "nodeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "feeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "treeId" : 12345,
  "rates" : {
    "property1" : {
      "feeId" : 12345,
      "rate" : 12345.0,
      "id" : 12345,
      "startDate" : "..."
    },
    "property2" : {
      "feeId" : 12345,
      "rate" : 12345.0,
      "id" : 12345,
      "startDate" : "..."
    }
  },
  "nodeId" : 12345,
  "feeId" : 12345
},
      "description" : ""
    }
    ,
    "json_FeeRateCreateBody" : {
      "type" : "object",
      "title" : "FeeRateCreateBody",
          "properties" : {
            "feeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "rate" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            }
          },
      "example" : {
  "feeId" : 12345,
  "rate" : 12345.0
},
      "description" : ""
    }
    ,
    "json_FeeRateDTO" : {
      "type" : "object",
      "title" : "FeeRateDTO",
          "properties" : {
            "feeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "rate" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "startDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            }
          },
      "example" : {
  "feeId" : 12345,
  "rate" : 12345.0,
  "id" : 12345,
  "startDate" : "..."
},
      "description" : ""
    }
    ,
    "json_FeeRateEditBody" : {
      "type" : "object",
      "title" : "FeeRateEditBody",
          "properties" : {
            "rate" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            }
          },
      "example" : {
  "rate" : 12345.0
},
      "description" : ""
    }
    ,
    "json_FeeType" : {
      "type" : "string",
      "title" : "FeeType",
          "enum" : [
            "PERCENT",
            "ABSOLUTE"
          ],
      "description" : ""
    }
    ,
    "json_FeeValueViewBase" : {
      "type" : "object",
      "title" : "FeeValueViewBase",
      "required" : ["global"],
          "properties" : {
            "feeName" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "feeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "feeType" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_FeeType"
            },
            "nodeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "global" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "feeValueId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "feeName" : "...",
  "feeId" : 12345,
  "feeType" : "PERCENT",
  "nodeId" : 12345,
  "global" : true,
  "feeValueId" : 12345
},
      "description" : ""
    }
    ,
    "json_FeeViewBase" : {
      "type" : "object",
      "title" : "FeeViewBase",
          "properties" : {
            "type" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_FeeType"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "type" : "ABSOLUTE",
  "id" : 12345,
  "name" : "..."
},
      "description" : ""
    }
    ,
    "json_GroupDTO" : {
      "type" : "object",
      "title" : "GroupDTO",
          "properties" : {
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "inherit" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            }
          },
      "example" : {
  "id" : 12345,
  "name" : "...",
  "inherit" : true
},
      "description" : ""
    }
    ,
    "json_GroupRolePair" : {
      "type" : "object",
      "title" : "GroupRolePair",
          "properties" : {
            "groupId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "roleId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "groupId" : 12345,
  "roleId" : 12345
},
      "description" : ""
    }
    ,
    "json_KPIDefinitionDTO" : {
      "type" : "object",
      "title" : "KPIDefinitionDTO",
      "required" : ["required", "archived"],
          "properties" : {
            "value" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "minRate" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "kpiSets" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_KPISetViewBase"
}
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "required" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "maxRate" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "analysisType" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_AnalysisType"
            },
            "type" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_Type"
            },
            "archived" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "kpiInfo" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "value" : "...",
  "minRate" : 12345,
  "kpiSets" : [ {
    "id" : 12345,
    "name" : "..."
  }, {
    "id" : 12345,
    "name" : "..."
  } ],
  "id" : 12345,
  "required" : true,
  "name" : "...",
  "maxRate" : 12345,
  "analysisType" : "none",
  "type" : "constant",
  "archived" : true,
  "kpiInfo" : "..."
},
      "description" : ""
    }
    ,
    "json_KPISetViewBase" : {
      "type" : "object",
      "title" : "KPISetViewBase",
          "properties" : {
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "id" : 12345,
  "name" : "..."
},
      "description" : ""
    }
    ,
    "json_KpiDTO" : {
      "type" : "object",
      "title" : "KpiDTO",
          "properties" : {
            "nodeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "target" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "infoText" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "weight" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "date" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "kpiDefinitionId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "value" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            }
          },
      "example" : {
  "nodeId" : 12345,
  "target" : 12345.0,
  "infoText" : "...",
  "weight" : 12345,
  "date" : "...",
  "kpiDefinitionId" : 12345,
  "id" : 12345,
  "value" : 12345.0
},
      "description" : ""
    }
    ,
    "json_MDFCommentViewBase" : {
      "type" : "object",
      "title" : "MDFCommentViewBase",
          "properties" : {
            "date" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "user" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_UserViewBase"
            },
            "comment" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "date" : "...",
  "user" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "comment" : "..."
},
      "description" : ""
    }
    ,
    "json_ManageTaskCreateDTO" : {
      "type" : "object",
      "title" : "ManageTaskCreateDTO",
          "properties" : {
            "responsibleUser" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_UserViewBase"
            },
            "date" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "info" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "state" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_State"
            },
            "nodeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "jobTypeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "workflowId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "markerType" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "responsibleUser" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "date" : "...",
  "name" : "...",
  "info" : "...",
  "id" : 12345,
  "state" : "IN_PROGRESS",
  "nodeId" : 12345,
  "jobTypeId" : 12345,
  "workflowId" : 12345,
  "markerType" : 12345
},
      "description" : ""
    }
    ,
    "json_MarkerTypeCategoryView" : {
      "type" : "object",
      "title" : "MarkerTypeCategoryView",
      "required" : ["predefined"],
          "properties" : {
            "active" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "predefined" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "active" : true,
  "predefined" : true,
  "name" : "...",
  "id" : 12345
},
      "description" : ""
    }
    ,
    "json_MarkerTypeCategoryViewBase" : {
      "type" : "object",
      "title" : "MarkerTypeCategoryViewBase",
      "required" : ["predefined"],
          "properties" : {
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "active" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "predefined" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "id" : 12345,
  "active" : true,
  "predefined" : true,
  "name" : "..."
},
      "description" : ""
    }
    ,
    "json_MarkerTypeRequestBody" : {
      "type" : "object",
      "title" : "MarkerTypeRequestBody",
          "properties" : {
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "categoryId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "active" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "base64File" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "fileType" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "id" : 12345,
  "categoryId" : 12345,
  "name" : "...",
  "active" : true,
  "base64File" : "...",
  "fileType" : "..."
},
      "description" : "Created by alexander.yordanov on 2019-11-06."
    }
    ,
    "json_MarkerTypeViewBase" : {
      "type" : "object",
      "title" : "MarkerTypeViewBase",
      "required" : ["predefined"],
          "properties" : {
            "active" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "predefined" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "fileId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "categoryId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "active" : true,
  "predefined" : true,
  "fileId" : 12345,
  "categoryId" : 12345,
  "id" : 12345,
  "name" : "..."
},
      "description" : ""
    }
    ,
    "json_MdfApproveBody" : {
      "type" : "object",
      "title" : "MdfApproveBody",
          "properties" : {
            "value" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "comment" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "value" : 12345.0,
  "comment" : "..."
},
      "description" : ""
    }
    ,
    "json_MdfDTO" : {
      "type" : "object",
      "title" : "MdfDTO",
          "properties" : {
            "state" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_State_MdfDTO"
            },
            "requestDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "approvalRejectedDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "value" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "billId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "attachmentIds" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "approverUserId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "nodeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "state" : "APPROVED",
  "requestDate" : "...",
  "approvalRejectedDate" : "...",
  "name" : "...",
  "value" : 12345.0,
  "billId" : 12345,
  "attachmentIds" : [ 12345, 12345 ],
  "approverUserId" : 12345,
  "id" : 12345,
  "nodeId" : 12345
},
      "description" : ""
    }
    ,
    "json_MdfGrantBody" : {
      "type" : "object",
      "title" : "MdfGrantBody",
          "properties" : {
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "date" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "value" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "comment" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "name" : "...",
  "date" : "...",
  "value" : 12345.0,
  "comment" : "..."
},
      "description" : ""
    }
    ,
    "json_MdfRequestBody" : {
      "type" : "object",
      "title" : "MdfRequestBody",
          "properties" : {
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "approverUserId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "billId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "comment" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "attachmentIds" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            }
          },
      "example" : {
  "name" : "...",
  "approverUserId" : 12345,
  "billId" : 12345,
  "comment" : "...",
  "attachmentIds" : [ 12345, 12345 ]
},
      "description" : ""
    }
    ,
    "json_ModuleDTO" : {
      "type" : "object",
      "title" : "ModuleDTO",
      "required" : ["canApplyView"],
          "properties" : {
            "moduleCode" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "canApplyView" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "moduleCode" : "...",
  "canApplyView" : true,
  "name" : "..."
},
      "description" : ""
    }
    ,
    "json_ModuleLinkRequestBody" : {
      "type" : "object",
      "title" : "ModuleLinkRequestBody",
          "properties" : {
            "moduleCode" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "viewId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "columnSetId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "moduleCode" : "...",
  "viewId" : 12345,
  "columnSetId" : 12345
},
      "description" : ""
    }
    ,
    "json_Month" : {
      "type" : "string",
      "title" : "Month",
          "enum" : [
            "JANUARY",
            "FEBRUARY",
            "MARCH",
            "APRIL",
            "MAY",
            "JUNE",
            "JULY",
            "AUGUST",
            "SEPTEMBER",
            "OCTOBER",
            "NOVEMBER",
            "DECEMBER"
          ],
      "description" : ""
    }
    ,
    "json_NodeDTO" : {
      "type" : "object",
      "title" : "Node",
          "properties" : {
            "parentId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "startDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "endDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "currencyId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "externalId" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "info" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "respPerson" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_UserViewBase"
            },
            "leaf" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "nodeType" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_NodeTypeViewBase"
            }
          },
      "example" : {
  "parentId" : 12345,
  "startDate" : "...",
  "endDate" : "...",
  "currencyId" : 12345,
  "externalId" : "...",
  "id" : 12345,
  "name" : "...",
  "info" : "...",
  "respPerson" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "leaf" : true,
  "nodeType" : {
    "active" : true,
    "italic" : true,
    "backgroundColour" : "...",
    "name" : "...",
    "icon" : 12345,
    "id" : 12345,
    "bold" : true,
    "colour" : "...",
    "editable" : true
  }
},
      "description" : ""
    }
    ,
    "json_NodeCommentRequestBody" : {
      "type" : "object",
      "title" : "NodeCommentRequestBody",
          "properties" : {
            "comment" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "comment" : "..."
},
      "description" : ""
    }
    ,
    "json_NodeCommentViewBase" : {
      "type" : "object",
      "title" : "NodeCommentViewBase",
          "properties" : {
            "commentDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "creator" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_UserViewBase"
            },
            "nodeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "comment" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "commentDate" : "...",
  "creator" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "nodeId" : 12345,
  "id" : 12345,
  "comment" : "..."
},
      "description" : ""
    }
    ,
    "json_NodeCopyRequestBody" : {
      "type" : "object",
      "title" : "NodeCopyRequest",
      "required" : ["copyTimelines", "copyTasks", "copyMarkers", "copyAttachments", "copyInvoices", "copySunkCosts", "copyBudgets", "copyDimensions", "copyKpis", "copyGeneralInfo", "copyFees"],
          "properties" : {
            "copyTimelines" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyTasks" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyMarkers" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyAttachments" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyInvoices" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copySunkCosts" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyBudgets" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyDimensions" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyKpis" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyGeneralInfo" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyFees" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            }
          },
      "example" : {
  "copyTimelines" : true,
  "copyTasks" : true,
  "copyMarkers" : true,
  "copyAttachments" : true,
  "copyInvoices" : true,
  "copySunkCosts" : true,
  "copyBudgets" : true,
  "copyDimensions" : true,
  "copyKpis" : true,
  "copyGeneralInfo" : true,
  "copyFees" : true
},
      "description" : ""
    }
    ,
    "json_NodeDeeplinkDTO" : {
      "type" : "object",
      "title" : "NodeDeeplinkDTO",
          "properties" : {
            "calendarLink" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "budgetLink" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "node" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_NodeDTO"
            }
          },
      "example" : {
  "calendarLink" : "...",
  "budgetLink" : "...",
  "node" : {
    "parentId" : 12345,
    "startDate" : "...",
    "endDate" : "...",
    "currencyId" : 12345,
    "externalId" : "...",
    "id" : 12345,
    "name" : "...",
    "info" : "...",
    "respPerson" : {
      "lastName" : "...",
      "login" : "...",
      "firstName" : "...",
      "userId" : 12345
    },
    "leaf" : true,
    "nodeType" : {
      "active" : true,
      "italic" : true,
      "backgroundColour" : "...",
      "name" : "...",
      "icon" : 12345,
      "id" : 12345,
      "bold" : true,
      "colour" : "...",
      "editable" : true
    }
  }
},
      "description" : ""
    }
    ,
    "json_NodeTypeViewBase" : {
      "type" : "object",
      "title" : "NodeTypeViewBase",
          "properties" : {
            "active" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "italic" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "backgroundColour" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "icon" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "bold" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "colour" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "editable" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            }
          },
      "example" : {
  "active" : true,
  "italic" : true,
  "backgroundColour" : "...",
  "name" : "...",
  "icon" : 12345,
  "id" : 12345,
  "bold" : true,
  "colour" : "...",
  "editable" : true
},
      "description" : ""
    }
    ,
    "json_PageResource" : {
      "type" : "object",
      "title" : "PageResource",
      "required" : ["totalElements", "limit", "offset", "numberOfElements", "pageNumber"],
          "properties" : {
            "content" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "object"
}
            },
            "totalElements" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            },
            "limit" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "offset" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "sort" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_Sort"
            },
            "numberOfElements" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "pageNumber" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
      "description" : ""
    }
    ,
    "json_PlanningType" : {
      "type" : "string",
      "title" : "PlanningType",
          "enum" : [
            "TOP_DOWN",
            "BOTTOM_UP"
          ],
      "description" : ""
    }
    ,
    "json_SearchCriteriaDTO" : {
      "type" : "object",
      "title" : "SearchCriteriaDTO",
          "properties" : {
            "types" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "string"
}
            },
            "treeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "types" : [ "...", "..." ],
  "treeId" : 12345
},
      "description" : "search criterias\ntypes for search : TIME_LINE, NODE, TASK, INVOICE, ATTACHMENT, SUNK_COST, DIMENSION_VALUE <br>\ntreeid: in which year to execute search. If treeId is NULL will execute for all years."
    }
    ,
    "json_SearchResultDTO" : {
      "type" : "object",
      "title" : "SearchResultDTO",
          "properties" : {
            "object" : {
            "readOnly" : false,
"description" : "",
"type" : "object"
            },
            "nodeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "type" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "ancestors" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_AncestorsDTO"
}
            }
          },
      "example" : {
  "object" : { },
  "nodeId" : 12345,
  "type" : "...",
  "ancestors" : [ {
    "id" : 12345,
    "name" : "..."
  }, {
    "id" : 12345,
    "name" : "..."
  } ]
},
      "description" : "object : object. Can be NULL if object that you search is no longer exist in system<br>\nnodeId : nodeId <br>\ntype : what type of object is this (TIME_LINE, NODE, TASK, INVOICE, ATTACHMENT, SUNK_COST, MANAGED_TASK) <br>"
    }
    ,
    "json_SlideshowDTO" : {
      "type" : "object",
      "title" : "SlideshowDTO",
          "properties" : {
            "slideshowElements" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_SlideshowElementDTO"
}
            },
            "width" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "height" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "slideshowElements" : [ {
    "url" : "...",
    "title" : "...",
    "video" : true,
    "stretched" : true
  }, {
    "url" : "...",
    "title" : "...",
    "video" : true,
    "stretched" : true
  } ],
  "width" : "...",
  "height" : "..."
},
      "description" : "Created by alexander.yordanov on 2018-04-27."
    }
    ,
    "json_SlideshowElementDTO" : {
      "type" : "object",
      "title" : "SlideshowElementDTO",
      "required" : ["video", "stretched"],
          "properties" : {
            "url" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "title" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "video" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "stretched" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            }
          },
      "example" : {
  "url" : "...",
  "title" : "...",
  "video" : true,
  "stretched" : true
},
      "description" : "Created by alexander.yordanov on 2018-04-27."
    }
    ,
    "json_Sort" : {
      "type" : "object",
      "title" : "Sort",
      "required" : ["unsorted", "sorted"],
          "properties" : {
            "unsorted" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "sorted" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            }
          },
      "example" : {
  "unsorted" : true,
  "sorted" : true
},
      "description" : ""
    }
    ,
    "json_SortResource" : {
      "type" : "object",
      "title" : "SortResource",
      "required" : ["unsorted", "sorted"],
          "properties" : {
            "unsorted" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "sorted" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            }
          },
      "example" : {
  "unsorted" : true,
  "sorted" : true
},
      "description" : ""
    }
    ,
    "json_State" : {
      "type" : "string",
      "title" : "State",
          "enum" : [
            "OPEN",
            "DONE",
            "PLANNED",
            "PAUSED",
            "CANCELLED",
            "IN_PROGRESS"
          ],
      "description" : ""
    }
    ,
    "json_State_MdfDTO" : {
      "type" : "string",
      "title" : "State",
          "enum" : [
            "APPROVED",
            "PENDING",
            "REJECTED"
          ],
      "description" : ""
    }
    ,
    "json_SunkCostDTO" : {
      "type" : "object",
      "title" : "SunkCostDTO",
          "properties" : {
            "date" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "costType" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "amount" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "info" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "supplier" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "closed" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "refNumber" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "respPerson" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "jobNumber" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "costCenter" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "date" : "...",
  "name" : "...",
  "costType" : "...",
  "amount" : 12345.0,
  "info" : "...",
  "id" : 12345,
  "supplier" : "...",
  "closed" : true,
  "refNumber" : "...",
  "respPerson" : "...",
  "jobNumber" : "...",
  "costCenter" : "..."
},
      "description" : "Created by alexander.yordanov on 2017-10-10."
    }
    ,
    "json_TargetBudgetDTO" : {
      "type" : "object",
      "title" : "TargetBudgetDTO",
          "properties" : {
            "date" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "amount" : {
            "readOnly" : false,
"description" : "",
"type" : "number"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "costType" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "date" : "...",
  "amount" : 12345.0,
  "id" : 12345,
  "name" : "...",
  "costType" : "..."
},
      "description" : "Created by alexander.yordanov on 2017-10-10."
    }
    ,
    "json_TaskDTO" : {
      "type" : "object",
      "title" : "Task",
          "properties" : {
            "state" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_State"
            },
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "markerType" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "jobId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "nodeId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "responsibleUser" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_UserViewBase"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "info" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "date" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            }
          },
      "example" : {
  "state" : "DONE",
  "id" : 12345,
  "markerType" : 12345,
  "jobId" : 12345,
  "nodeId" : 12345,
  "responsibleUser" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "name" : "...",
  "info" : "...",
  "date" : "..."
},
      "description" : ""
    }
    ,
    "json_TasksRevisionChangesOfTaskDTO" : {
      "type" : "object",
      "title" : "TasksRevisionChangesOfTaskDTO",
          "properties" : {
            "deleted" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "modified" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_TaskDTO"
}
            },
            "revision" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            }
          },
      "example" : {
  "deleted" : [ 12345, 12345 ],
  "modified" : [ {
    "state" : "CANCELLED",
    "id" : 12345,
    "markerType" : 12345,
    "jobId" : 12345,
    "nodeId" : 12345,
    "responsibleUser" : {
      "lastName" : "...",
      "login" : "...",
      "firstName" : "...",
      "userId" : 12345
    },
    "name" : "...",
    "info" : "...",
    "date" : "..."
  }, {
    "state" : "OPEN",
    "id" : 12345,
    "markerType" : 12345,
    "jobId" : 12345,
    "nodeId" : 12345,
    "responsibleUser" : {
      "lastName" : "...",
      "login" : "...",
      "firstName" : "...",
      "userId" : 12345
    },
    "name" : "...",
    "info" : "...",
    "date" : "..."
  } ],
  "revision" : 12345
},
      "description" : ""
    }
    ,
    "json_TreeDTO" : {
      "type" : "object",
      "title" : "Tree",
          "properties" : {
            "id" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "planningType" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_PlanningType"
            },
            "startDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "endDate" : {
            "readOnly" : false,
"description" : "",
"type" : "string",
"format" : "date-time"
            },
            "type" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_TreeType"
            },
            "currencyId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "id" : 12345,
  "name" : "...",
  "planningType" : "TOP_DOWN",
  "startDate" : "...",
  "endDate" : "...",
  "currencyId" : 12345
},
      "description" : ""
    }
    ,
    "json_TreeType" : {
      "type" : "string",
      "title" : "TreeType",
          "enum" : [
            "FLEXIBLE",
            "STRICT"
          ],
      "description" : ""
    }
    ,
    "json_Type" : {
      "type" : "string",
      "title" : "Type",
          "enum" : [
            "constant",
            "computed",
            "measurable"
          ],
      "description" : ""
    }
    ,
    "json_UserViewBase" : {
      "type" : "object",
      "title" : "UserViewBase",
          "properties" : {
            "lastName" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "login" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "firstName" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "userId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "lastName" : "...",
  "login" : "...",
  "firstName" : "...",
  "userId" : 12345
},
      "description" : ""
    }
    ,
    "json_ViewViewBase" : {
      "type" : "object",
      "title" : "ViewViewBase",
          "properties" : {
            "viewName" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "viewId" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          },
      "example" : {
  "viewName" : "...",
  "viewId" : 12345
},
      "description" : ""
    }
    ,
    "xml_ns0_pageResource" : {
      "type" : "object",
      "title" : "pageResource",
      "allOf" : [
        {
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_ancestorsDTO" : {
      "type" : "object",
      "title" : "ancestorsDTO",
      "allOf" : [
        {
        }
      ],
      "description" : "Created by alexander.yordanov on 2019-09-17."
    }
    ,
    "xml_ns0_attachmentDTO" : {
      "type" : "object",
      "title" : "attachmentDTO",
      "allOf" : [
        {
          "$ref" : "#/definitions/xml_ns0_annexAttachmentViewBase"
        },
        {
        }
      ],
      "description" : "Created by alexander.yordanov on 2017-10-20."
    }
    ,
    "xml_ns0_BMonthDTO" : {
      "type" : "object",
      "title" : "BMonthDTO",
      "allOf" : [
        {
          "properties" : {
            "actual" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "calculated" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "commited" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "mdf" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "planned" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "projected" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "remainig" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "target" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_BQuarterDTO" : {
      "type" : "object",
      "title" : "BQuarterDTO",
      "allOf" : [
        {
          "properties" : {
            "actual" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "calculated" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "commited" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "mdf" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "planned" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "projected" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "remainig" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "target" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            }
          }
        }
      ],
      "description" : "Quarter budget"
    }
    ,
    "xml_ns0_BYearDTO" : {
      "type" : "object",
      "title" : "BYearDTO",
      "allOf" : [
        {
          "properties" : {
            "actual" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            },
            "calculated" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            },
            "commited" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            },
            "mdf" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            },
            "planned" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            },
            "projected" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            },
            "remainig" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            },
            "target" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_billDTO" : {
      "type" : "object",
      "title" : "billDTO",
      "allOf" : [
        {
          "$ref" : "#/definitions/xml_ns0_annexBillViewBase"
        },
        {
        }
      ],
      "description" : "Created by alexander.yordanov on 2017-10-10."
    }
    ,
    "xml_ns0_budgetColumnsDTO" : {
      "type" : "object",
      "title" : "budgetColumnsDTO",
      "allOf" : [
        {
          "properties" : {
            "month" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_BMonthDTO"
            },
            "quarter" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_BQuarterDTO"
            },
            "year" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_BYearDTO"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_budgetSetDTO" : {
      "type" : "object",
      "title" : "budgetSetDTO",
      "allOf" : [
        {
          "$ref" : "#/definitions/xml_ns0_budgetSetViewBase"
        },
        {
        }
      ],
      "description" : "Created by alexander.yordanov on 2020-05-18."
    }
    ,
    "xml_ns0_dimensionNodeValueDTO" : {
      "type" : "object",
      "title" : "dimensionNodeValueDTO",
      "allOf" : [
        {
          "properties" : {
            "dimensionId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "dimensionType" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_dimensionTypes"
            },
            "values" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/xml_ns0_dimensionValueViewBase"
}
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_dimensionPossibleValueDTO" : {
      "type" : "object",
      "title" : "dimensionPossibleValueDTO",
      "allOf" : [
        {
          "$ref" : "#/definitions/xml_ns0_dimensionPossibleValueViewBase"
        },
        {
          "properties" : {
            "parentValueId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_exchangeRateDTO" : {
      "type" : "object",
      "title" : "exchangeRateDTO",
      "allOf" : [
        {
          "properties" : {
            "currencyId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "exchangeRate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "number",
"format" : "double"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "referenceCurrencyId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "units" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_feeNodeRatesDTO" : {
      "type" : "object",
      "title" : "feeNodeRatesDTO",
      "allOf" : [
        {
          "properties" : {
            "feeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "nodeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "rates" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "object"
            },
            "treeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_feeRateDTO" : {
      "type" : "object",
      "title" : "feeRateDTO",
      "allOf" : [
        {
          "$ref" : "#/definitions/xml_ns0_feeRateViewBase"
        },
        {
          "properties" : {
            "rate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "number",
"format" : "double"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_groupDTO" : {
      "type" : "object",
      "title" : "groupDTO",
      "allOf" : [
        {
          "properties" : {
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "inherit" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_groupRolePair" : {
      "type" : "object",
      "title" : "groupRolePair",
      "allOf" : [
        {
          "properties" : {
            "groupId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "roleId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_kpiDTO" : {
      "type" : "object",
      "title" : "kpiDTO",
      "allOf" : [
        {
          "$ref" : "#/definitions/xml_ns0_KPIViewBase"
        },
        {
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_manageTaskCreateDTO" : {
      "type" : "object",
      "title" : "manageTaskCreateDTO",
      "allOf" : [
        {
          "$ref" : "#/definitions/xml_ns0_annexTaskViewBase"
        },
        {
          "properties" : {
            "jobTypeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "nodeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "workflowId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_mdfDTO" : {
      "type" : "object",
      "title" : "mdfDTO",
      "allOf" : [
        {
          "properties" : {
            "approvalRejectedDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "approverUserId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "attachmentIds" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "billId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "nodeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "requestDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "state" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_state"
            },
            "value" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_state" : {
      "type" : "string",
      "title" : "state",
          "enum" : [
            "APPROVED",
            "PENDING",
            "REJECTED"
          ],
      "description" : ""
    }
    ,
    "xml_ns0_moduleDTO" : {
      "type" : "object",
      "title" : "moduleDTO",
      "required" : ["canApplyView"],
      "allOf" : [
        {
          "properties" : {
            "canApplyView" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "moduleCode" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_nodeDTO" : {
      "type" : "object",
      "title" : "Node",
      "allOf" : [
        {
          "properties" : {
            "currencyId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "endDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "externalId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "info" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "leaf" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "nodeType" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_nodeTypeViewBase"
            },
            "parentId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "respPerson" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_userViewBase"
            },
            "startDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_nodeDeeplinkDTO" : {
      "type" : "object",
      "title" : "nodeDeeplinkDTO",
      "allOf" : [
        {
          "properties" : {
            "budgetLink" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "calendarLink" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "node" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_nodeDTO"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_searchCriteriaDTO" : {
      "type" : "object",
      "title" : "searchCriteriaDTO",
      "allOf" : [
        {
          "properties" : {
            "treeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "types" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "string"
}
            }
          }
        }
      ],
      "description" : "search criterias\ntypes for search : TIME_LINE, NODE, TASK, INVOICE, ATTACHMENT, SUNK_COST, DIMENSION_VALUE <br>\ntreeid: in which year to execute search. If treeId is NULL will execute for all years."
    }
    ,
    "xml_ns0_searchResultDTO" : {
      "type" : "object",
      "title" : "searchResultDTO",
      "allOf" : [
        {
          "properties" : {
            "ancestors" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/xml_ns0_ancestorsDTO"
}
            },
            "nodeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "object" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "object"
            },
            "type" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : "object : object. Can be NULL if object that you search is no longer exist in system<br>\nnodeId : nodeId <br>\ntype : what type of object is this (TIME_LINE, NODE, TASK, INVOICE, ATTACHMENT, SUNK_COST, MANAGED_TASK) <br>"
    }
    ,
    "xml_ns0_slideshowDTO" : {
      "type" : "object",
      "title" : "slideshowDTO",
      "allOf" : [
        {
          "properties" : {
            "height" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "slideshowElements" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/xml_ns0_slideshowElementDTO"
}
            },
            "width" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : "Created by alexander.yordanov on 2018-04-27."
    }
    ,
    "xml_ns0_slideshowElementDTO" : {
      "type" : "object",
      "title" : "slideshowElementDTO",
      "required" : ["stretched", "video"],
      "allOf" : [
        {
          "properties" : {
            "stretched" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "title" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "url" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "video" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            }
          }
        }
      ],
      "description" : "Created by alexander.yordanov on 2018-04-27."
    }
    ,
    "xml_ns0_sunkCostDTO" : {
      "type" : "object",
      "title" : "sunkCostDTO",
      "allOf" : [
        {
          "$ref" : "#/definitions/xml_ns0_annexSunkCostViewBase"
        },
        {
        }
      ],
      "description" : "Created by alexander.yordanov on 2017-10-10."
    }
    ,
    "xml_ns0_targetBudgetDTO" : {
      "type" : "object",
      "title" : "targetBudgetDTO",
      "allOf" : [
        {
          "$ref" : "#/definitions/xml_ns0_annexTargetBudgetViewBase"
        },
        {
        }
      ],
      "description" : "Created by alexander.yordanov on 2017-10-10."
    }
    ,
    "xml_ns0_taskDTO" : {
      "type" : "object",
      "title" : "Task",
      "allOf" : [
        {
          "$ref" : "#/definitions/xml_ns0_annexTaskViewBase"
        },
        {
          "properties" : {
            "jobId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "nodeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_treeDTO" : {
      "type" : "object",
      "title" : "Tree",
      "allOf" : [
        {
          "properties" : {
            "currencyId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "endDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "planningType" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_planningType"
            },
            "startDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "type" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_treeType"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_planningType" : {
      "type" : "string",
      "title" : "planningType",
          "enum" : [
            "TOP_DOWN",
            "BOTTOM_UP"
          ],
      "description" : ""
    }
    ,
    "xml_ns0_treeType" : {
      "type" : "string",
      "title" : "treeType",
          "enum" : [
            "FLEXIBLE",
            "STRICT"
          ],
      "description" : ""
    }
    ,
    "xml_ns0_createNodeRequestBody" : {
      "type" : "object",
      "title" : "createNodeRequestBody",
      "allOf" : [
        {
          "properties" : {
            "currencyId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "endDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "externalId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "info" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "nodeTypeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "respPerson" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_userViewBase"
            },
            "startDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_editMTaskRequestBody" : {
      "type" : "object",
      "title" : "editMTaskRequestBody",
      "allOf" : [
        {
          "properties" : {
            "markerType" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "responsibleUserId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_editNodeRequestBody" : {
      "type" : "object",
      "title" : "EditNode",
      "allOf" : [
        {
          "properties" : {
            "currencyId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "endDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "externalId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "generalNote" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "nodeName" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "nodeTypeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "responsiblePerson" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_userViewBase"
            },
            "startDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_editTaskRequestBody" : {
      "type" : "object",
      "title" : "editTaskRequestBody",
      "allOf" : [
        {
          "properties" : {
            "date" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "info" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "markerType" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "responsibleUser" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_userViewBase"
            },
            "state" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_feeRateCreateBody" : {
      "type" : "object",
      "title" : "feeRateCreateBody",
      "allOf" : [
        {
          "properties" : {
            "feeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "rate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "number",
"format" : "double"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_feeRateEditBody" : {
      "type" : "object",
      "title" : "feeRateEditBody",
      "allOf" : [
        {
          "properties" : {
            "rate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "number",
"format" : "double"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_markerTypeRequestBody" : {
      "type" : "object",
      "title" : "markerTypeRequestBody",
      "allOf" : [
        {
          "properties" : {
            "active" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "base64File" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "categoryId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "fileType" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : "Created by alexander.yordanov on 2019-11-06."
    }
    ,
    "xml_ns0_mdfApproveBody" : {
      "type" : "object",
      "title" : "mdfApproveBody",
      "allOf" : [
        {
          "properties" : {
            "comment" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "value" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_mdfGrantBody" : {
      "type" : "object",
      "title" : "mdfGrantBody",
      "allOf" : [
        {
          "properties" : {
            "comment" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "date" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "value" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_mdfRequestBody" : {
      "type" : "object",
      "title" : "mdfRequestBody",
      "allOf" : [
        {
          "properties" : {
            "approverUserId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "attachmentIds" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "billId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "comment" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_moduleLinkRequestBody" : {
      "type" : "object",
      "title" : "moduleLinkRequestBody",
      "allOf" : [
        {
          "properties" : {
            "columnSetId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "moduleCode" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "viewId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_nodeCommentRequestBody" : {
      "type" : "object",
      "title" : "nodeCommentRequestBody",
      "allOf" : [
        {
          "properties" : {
            "comment" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_nodeCopyRequestBody" : {
      "type" : "object",
      "title" : "NodeCopyRequest",
      "required" : ["copyAttachments", "copyBudgets", "copyDimensions", "copyFees", "copyGeneralInfo", "copyInvoices", "copyKpis", "copyMarkers", "copySunkCosts", "copyTasks", "copyTimelines"],
      "allOf" : [
        {
          "properties" : {
            "copyAttachments" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyBudgets" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyDimensions" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyFees" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyGeneralInfo" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyInvoices" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyKpis" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyMarkers" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copySunkCosts" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyTasks" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyTimelines" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_tasksRevisionChanges" : {
      "type" : "object",
      "title" : "tasksRevisionChanges",
      "allOf" : [
        {
          "properties" : {
            "deleted" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "modified" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "object"
}
            },
            "revision" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_dimensionTypes" : {
      "type" : "string",
      "title" : "dimensionTypes",
          "enum" : [
            "TEXT_DIMENSION_TYPE",
            "M_SELECTABLE_DIMENSION_TYPE",
            "SELECTABLE_DIMENSION_TYPE",
            "MW_SELECTABLE_DIMENSION_TYPE",
            "STRUCTURED_TEXT_DIMENSION_TYPE",
            "CONTINUES_TEXT_DIMENSION_TYPE"
          ],
      "description" : ""
    }
    ,
    "xml_ns0_BMCurrencyView" : {
      "type" : "object",
      "title" : "BMCurrencyView",
      "allOf" : [
        {
          "properties" : {
            "currencyId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "currencyName" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "currencySymbol" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_markerTypeCategoryView" : {
      "type" : "object",
      "title" : "markerTypeCategoryView",
      "allOf" : [
        {
          "$ref" : "#/definitions/xml_ns0_markerTypeCategoryViewBase"
        },
        {
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_annexAttachmentViewBase" : {
      "type" : "object",
      "title" : "annexAttachmentViewBase",
      "allOf" : [
        {
          "properties" : {
            "annexAttachmentId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "attachmentDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "attachmentFileName" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "comment" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_annexBillViewBase" : {
      "type" : "object",
      "title" : "annexBillViewBase",
      "allOf" : [
        {
          "properties" : {
            "amount" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            },
            "annexBillId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "bookingDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "costCenter" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "costType" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "date" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "jobNumber" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "note" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "number" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "paid" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "referenceNumber" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "responsiblePerson" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "supplier" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_annexContentViewBase" : {
      "type" : "object",
      "title" : "annexContentViewBase",
      "required" : ["published"],
      "allOf" : [
        {
          "properties" : {
            "contentId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "published" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "text" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_annexPeriodViewBase" : {
      "type" : "object",
      "title" : "annexPeriodViewBase",
      "allOf" : [
        {
          "properties" : {
            "annexPeriodId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "categoryId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "endDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "startDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_annexSunkCostViewBase" : {
      "type" : "object",
      "title" : "annexSunkCostViewBase",
      "allOf" : [
        {
          "properties" : {
            "amount" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            },
            "closed" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "costCenter" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "costType" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "date" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "info" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "jobNumber" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "refNumber" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "respPerson" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "supplier" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_annexTargetBudgetViewBase" : {
      "type" : "object",
      "title" : "annexTargetBudgetViewBase",
      "allOf" : [
        {
          "properties" : {
            "amount" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            },
            "costType" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "date" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_annexTaskViewBase" : {
      "type" : "object",
      "title" : "annexTaskViewBase",
      "allOf" : [
        {
          "properties" : {
            "date" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "info" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "markerType" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "responsibleUser" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_userViewBase"
            },
            "state" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "object"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_budgetSetViewBase" : {
      "type" : "object",
      "title" : "budgetSetViewBase",
      "allOf" : [
        {
          "properties" : {
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "setId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_categoryViewBase" : {
      "type" : "object",
      "title" : "categoryViewBase",
      "required" : ["active"],
      "allOf" : [
        {
          "properties" : {
            "active" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "color" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_dimensionPossibleValueViewBase" : {
      "type" : "object",
      "title" : "dimensionPossibleValueViewBase",
      "allOf" : [
        {
          "properties" : {
            "value" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "valueId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_dimensionValueViewBase" : {
      "type" : "object",
      "title" : "dimensionValueViewBase",
      "allOf" : [
        {
          "properties" : {
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "value" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "weight" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "number",
"format" : "double"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_dimensionViewBase" : {
      "type" : "object",
      "title" : "dimensionViewBase",
      "required" : ["archived", "copyable", "inheritable", "readOnly", "required"],
      "allOf" : [
        {
          "properties" : {
            "archived" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "copyable" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "dimensionId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "info" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "inheritable" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "readOnly" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "required" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "type" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_dimensionTypes"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_elementTypeViewBase" : {
      "type" : "object",
      "title" : "elementTypeViewBase",
      "required" : ["predefined"],
      "allOf" : [
        {
          "properties" : {
            "base64File" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "fileId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "fileType" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "predefined" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_feeRateViewBase" : {
      "type" : "object",
      "title" : "feeRateViewBase",
      "allOf" : [
        {
          "properties" : {
            "feeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "startDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_feeType" : {
      "type" : "string",
      "title" : "feeType",
          "enum" : [
            "PERCENT",
            "ABSOLUTE"
          ],
      "description" : ""
    }
    ,
    "xml_ns0_feeValueViewBase" : {
      "type" : "object",
      "title" : "feeValueViewBase",
      "required" : ["global"],
      "allOf" : [
        {
          "properties" : {
            "feeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "feeName" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "feeType" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_feeType"
            },
            "feeValueId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "global" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "nodeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_feeViewBase" : {
      "type" : "object",
      "title" : "feeViewBase",
      "allOf" : [
        {
          "properties" : {
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "type" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_feeType"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_KPIDefinitionDTO" : {
      "type" : "object",
      "title" : "KPIDefinitionDTO",
      "allOf" : [
        {
          "$ref" : "#/definitions/xml_ns0_KPIDefinitionViewBase"
        },
        {
          "properties" : {
            "kpiSets" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/xml_ns0_KPISetViewBase"
}
            },
            "value" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_KPIDefinitionViewBase" : {
      "type" : "object",
      "title" : "KPIDefinitionViewBase",
      "required" : ["archived", "required"],
      "allOf" : [
        {
          "properties" : {
            "analysisType" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_analysisType"
            },
            "archived" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "kpiInfo" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "maxValue" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "minValue" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "required" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "type" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_type"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_analysisType" : {
      "type" : "string",
      "title" : "analysisType",
          "enum" : [
            "LESS_IS_BETTER",
            "MORE_IS_BETTER",
            "NONE"
          ],
      "description" : ""
    }
    ,
    "xml_ns0_type" : {
      "type" : "string",
      "title" : "type",
          "enum" : [
            "CONSTANT",
            "COMPUTED",
            "MEASURABLE"
          ],
      "description" : ""
    }
    ,
    "xml_ns0_KPISetViewBase" : {
      "type" : "object",
      "title" : "KPISetViewBase",
      "allOf" : [
        {
          "properties" : {
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_KPIViewBase" : {
      "type" : "object",
      "title" : "KPIViewBase",
      "allOf" : [
        {
          "properties" : {
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "kpiComment" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "kpiDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "kpiDefinitionId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "nodeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "target" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "number",
"format" : "double"
            },
            "value" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "number",
"format" : "double"
            },
            "weight" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_MDFCommentViewBase" : {
      "type" : "object",
      "title" : "MDFCommentViewBase",
      "allOf" : [
        {
          "properties" : {
            "comment" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "date" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "user" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_userViewBase"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_markerTypeCategoryViewBase" : {
      "type" : "object",
      "title" : "markerTypeCategoryViewBase",
      "allOf" : [
        {
          "properties" : {
            "active" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_markerTypeViewBase" : {
      "type" : "object",
      "title" : "markerTypeViewBase",
      "required" : ["predefined"],
      "allOf" : [
        {
          "properties" : {
            "active" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "categoryId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "fileId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "predefined" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_nodeCommentViewBase" : {
      "type" : "object",
      "title" : "nodeCommentViewBase",
      "allOf" : [
        {
          "properties" : {
            "comment" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "commentDate" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "creator" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"$ref" : "#/definitions/xml_ns0_userViewBase"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "nodeId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_nodeTypeViewBase" : {
      "type" : "object",
      "title" : "nodeTypeViewBase",
      "allOf" : [
        {
          "properties" : {
            "active" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "backgroundColour" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "bold" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "colour" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "editable" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "icon" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "id" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "italic" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "name" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_userViewBase" : {
      "type" : "object",
      "title" : "userViewBase",
      "allOf" : [
        {
          "properties" : {
            "firstName" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "lastName" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "login" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "userId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_viewViewBase" : {
      "type" : "object",
      "title" : "viewViewBase",
      "allOf" : [
        {
          "properties" : {
            "viewId" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int32"
            },
            "viewName" : {
              "xml" : {
                "namespace" : ""
              },
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          }
        }
      ],
      "description" : ""
    }
    ,
    "xml_ns0_month" : {
      "type" : "string",
      "title" : "month",
          "enum" : [
            "JANUARY",
            "FEBRUARY",
            "MARCH",
            "APRIL",
            "MAY",
            "JUNE",
            "JULY",
            "AUGUST",
            "SEPTEMBER",
            "OCTOBER",
            "NOVEMBER",
            "DECEMBER"
          ],
      "description" : ""
    }
  },
  "paths": {
    "\/api/{version}/approver" : {
      "get" : {
        "tags" : [ "\/api/{version}/approver" ],
        "description" : "",
        "operationId" : "getApprovers",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>UserViewBase<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/approver/{userId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/approver/{userId}" ],
        "summary" : "set user to be approver.",
        "description" : "set user to be approver.",
        "operationId" : "setUserAsApprover",
        "parameters" : [
          {
            "name" : "userId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/approver/{userId}" ],
        "summary" : "remove assigment user to be approver.",
        "description" : "remove assigment user to be approver.\nIf user was set as approver in some MDF, validation error will be throw.",
        "operationId" : "removeUserAsApprover",
        "parameters" : [
          {
            "name" : "userId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/attachment/bill/node/{nodeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/attachment/bill/node/{nodeId}" ],
        "description" : "",
        "operationId" : "getAttachmentsForBills",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "nodeId for which to get attachments"
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : "for paging"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>AttachmentDTO<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/attachment/content/{attachmentId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/attachment/content/{attachmentId}" ],
        "description" : "",
        "operationId" : "hasContent",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "attachmentId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "attachment to check"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "true if given attachment is used in content, false otherwise",
"type" : "boolean"
            },
            "description" : "true if given attachment is used in content, false otherwise"
          }
        }
      }
    }
    ,
    "\/api/{version}/attachment/download/{attachmentId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/attachment/download/{attachmentId}" ],
        "description" : "",
        "operationId" : "downloadAttachment",
        "parameters" : [
          {
            "name" : "attachmentId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "attachment to download"
          }
        ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/attachment/externalIds" : {
      "post" : {
        "tags" : [ "\/api/{version}/attachment/externalIds" ],
        "description" : "",
        "operationId" : "getAttachmentsByExternalId",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "list of externalIds",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "description" : "list of externalIds"
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "filtered list of external ids that are attached",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "description" : "filtered list of external ids that are attached"
          }
        }
      }
    }
    ,
    "\/api/{version}/attachment/node/{nodeId}" : {
      "post" : {
        "tags" : [ "\/api/{version}/attachment/node/{nodeId}" ],
        "description" : "",
        "operationId" : "createAttachment",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "attachment",
            "in" : "formData",
            "required" : false,
            "type" : "file",
            "description" : "object containing name, link, comment for the attachment. If file is provided everything except comment is ignored"
          },
          {
            "name" : "file",
            "in" : "formData",
            "required" : false,
            "type" : "file",
            "description" : "file to attach - can be omitted if attachmentBody provides link"
          },
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "id of node to make the attachment"
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_AttachmentDTO"
            },
            "example" : {
  "annexAttachmentId" : 12345,
  "urlId" : "...",
  "attachmentDate" : "...",
  "fileSize" : 12345,
  "comment" : "...",
  "externalId" : 12345,
  "attachmentFileName" : "...",
  "source" : "...",
  "attachmentLink" : "..."
},
            "description" : ""
          }
        }
      }
      ,
      "get" : {
        "tags" : [ "\/api/{version}/attachment/node/{nodeId}" ],
        "description" : "",
        "operationId" : "getAttachmentsForNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "nodeId for which to get attachments"
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : "for paging"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>AttachmentDTO<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/attachment/sunk-cost/node/{nodeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/attachment/sunk-cost/node/{nodeId}" ],
        "description" : "",
        "operationId" : "getAttachmentsForSunkCosts",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "nodeId for which to get attachments"
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : "for paging"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>AttachmentDTO<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/attachment/unlink/{attachmentId}" : {
      "delete" : {
        "tags" : [ "\/api/{version}/attachment/unlink/{attachmentId}" ],
        "description" : "",
        "operationId" : "unlinkAttachment",
        "parameters" : [
          {
            "name" : "attachmentId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "attachment to unlink (from invoice or sunk cost)"
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/attachment/{attachmentId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/attachment/{attachmentId}" ],
        "description" : "",
        "operationId" : "getAttachmentById",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "attachmentId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "attachmentId to search"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_AttachmentDTO"
            },
            "example" : {
  "annexAttachmentId" : 12345,
  "urlId" : "...",
  "attachmentDate" : "...",
  "fileSize" : 12345,
  "comment" : "...",
  "externalId" : 12345,
  "attachmentFileName" : "...",
  "source" : "...",
  "attachmentLink" : "..."
},
            "description" : "found attachment"
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/attachment/{attachmentId}" ],
        "description" : "",
        "operationId" : "deleteAttachment",
        "parameters" : [
          {
            "name" : "attachmentId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "attachment to delete"
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/basic-search" : {
      "post" : {
        "tags" : [ "\/api/{version}/basic-search" ],
        "description" : "",
        "operationId" : "search",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "query",
            "in" : "query",
            "required" : true,
            "type" : "string",
            "description" : "- search string"
          },
          {
            "name" : "withAdditionalInfo",
            "in" : "query",
            "required" : true,
            "default" : "false",
            "type" : "boolean",
            "description" : "- include addition info (fields) for object with type : NODE"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_SearchCriteriaDTO"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_SearchResultDTO"
            },
            "example" : {
  "object" : { },
  "nodeId" : 12345,
  "type" : "...",
  "ancestors" : [ {
    "id" : 12345,
    "name" : "..."
  }, {
    "id" : 12345,
    "name" : "..."
  } ]
},
            "description" : "Page with SearchResultDTO"
          }
        }
      }
    }
    ,
    "\/api/{version}/budget-set/public/all" : {
      "get" : {
        "tags" : [ "\/api/{version}/budget-set/public/all" ],
        "description" : "",
        "operationId" : "getPublicBudgetSetViews",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "all public budget sets",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_BudgetSetViewBase"
}
            },
            "example" : [ {
  "budgetColumns" : [ {
    "formula" : "...",
    "negativeBackground" : "...",
    "order" : 12345,
    "positiveBackground" : "...",
    "id" : 12345,
    "negativeFont" : "...",
    "columnType" : "FORMULA",
    "dimensionId" : 12345,
    "width" : 12345,
    "activeColumns" : [ "MDF", "MDF" ],
    "positiveFont" : "..."
  }, {
    "formula" : "...",
    "negativeBackground" : "...",
    "order" : 12345,
    "positiveBackground" : "...",
    "id" : 12345,
    "negativeFont" : "...",
    "columnType" : "CURRENCY",
    "dimensionId" : 12345,
    "width" : 12345,
    "activeColumns" : [ "PROJECTED", "PROJECTED" ],
    "positiveFont" : "..."
  } ],
  "rounding" : true,
  "budgetScale" : "NORMAL",
  "name" : "...",
  "setId" : 12345,
  "configurationInfo" : true,
  "yearSwitch" : true,
  "currencyView" : "WORKING"
} ],
            "description" : "all public budget sets"
          }
        }
      }
    }
    ,
    "\/api/{version}/budget/node/{nodeId}/tree/{treeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/budget/node/{nodeId}/tree/{treeId}" ],
        "summary" : "Return budget values of months, year, quarter, for planned,committed,actual,projected,remaining,mdf.",
        "description" : "Return budget values of months, year, quarter, for planned,committed,actual,projected,remaining,mdf.",
        "operationId" : "getBudgetColumnValues",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "treeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "calcByRef",
            "in" : "query",
            "required" : false,
            "default" : "false",
            "type" : "boolean",
            "description" : "false(default) - calculate by working currency, true - calculate by reference currency"
          },
          {
            "name" : "field",
            "in" : "query",
            "required" : true,
            "type" : "array",
            "items" : {
            "type" : "string"
            },
            "collectionFormat" : "multi",
            "description" : "available values: month, quarter, year"
          },
          {
            "name" : "round",
            "in" : "query",
            "required" : false,
            "default" : "false",
            "type" : "boolean",
            "description" : "false(default) - don't round values, true - round values"
          },
          {
            "name" : "scale",
            "in" : "query",
            "required" : false,
            "default" : "NORMAL",
            "type" : "string",
            "enum" : ["BILLIONS", "MILLIONS", "NORMAL", "THOUSANDS"],
            "description" : "available values NORMAL(default), THOUSANDS, MILLIONS, BILLIONS"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_BudgetColumnsDTO"
            },
            "example" : {
  "month" : {
    "planned" : [ 12345.0, 12345.0 ],
    "commited" : [ 12345.0, 12345.0 ],
    "actual" : [ 12345.0, 12345.0 ],
    "projected" : [ 12345.0, 12345.0 ],
    "remainig" : [ 12345.0, 12345.0 ],
    "mdf" : [ 12345.0, 12345.0 ],
    "calculated" : [ 12345.0, 12345.0 ],
    "target" : [ 12345.0, 12345.0 ]
  },
  "quarter" : {
    "planned" : [ 12345.0, 12345.0 ],
    "commited" : [ 12345.0, 12345.0 ],
    "actual" : [ 12345.0, 12345.0 ],
    "projected" : [ 12345.0, 12345.0 ],
    "remainig" : [ 12345.0, 12345.0 ],
    "mdf" : [ 12345.0, 12345.0 ],
    "calculated" : [ 12345.0, 12345.0 ],
    "target" : [ 12345.0, 12345.0 ]
  },
  "year" : {
    "planned" : 12345.0,
    "commited" : 12345.0,
    "actual" : 12345.0,
    "projected" : 12345.0,
    "remainig" : 12345.0,
    "mdf" : 12345.0,
    "target" : 12345.0,
    "calculated" : 12345.0
  }
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/budget/planned/month/node/{nodeId}/tree/{treeId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/budget/planned/month/node/{nodeId}/tree/{treeId}" ],
        "summary" : "Edit PLANNED month budget of node for given year.",
        "description" : "Edit PLANNED month budget of node for given year.The values are in cent(multiplied by 100). If you want to skip some months send null value, for example \"planned\":[1000, 10000, null, null, null, null, null, null, null, null, null, null]\nwill add value 10 for the first month and 100 for the second",
        "operationId" : "editPlannedMonthBudget",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id"
          },
          {
            "name" : "treeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "tree id"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_BMonthDTO"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/budget/planned/year/node/{nodeId}/tree/{treeId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/budget/planned/year/node/{nodeId}/tree/{treeId}" ],
        "summary" : "Edit PLANNED year budget of node for given year.",
        "description" : "Edit PLANNED year budget of node for given year. The values are in cent(multiplied by 100). For example to set 8000, send \"planned\":800000(multiplied by 100)",
        "operationId" : "editPlanneYeardBudget",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id"
          },
          {
            "name" : "treeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "tree id"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_BYearDTO"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/budgetSet/public/all" : {
      "get" : {
        "deprecated":true,
        "tags" : [ "\/api/{version}/budgetSet/public/all" ],
        "summary" : "Returns all public budget sets.",
        "description" : "Returns all public budget sets",
        "operationId" : "getPublicViewsWithoutRightCheck",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_BudgetSetViewBase"
}
            },
            "example" : [ {
  "budgetColumns" : [ {
    "formula" : "...",
    "negativeBackground" : "...",
    "order" : 12345,
    "positiveBackground" : "...",
    "id" : 12345,
    "negativeFont" : "...",
    "columnType" : "YEAR_BUDGET",
    "dimensionId" : 12345,
    "width" : 12345,
    "activeColumns" : [ "PLANNED", "ACTUAL" ],
    "positiveFont" : "..."
  }, {
    "formula" : "...",
    "negativeBackground" : "...",
    "order" : 12345,
    "positiveBackground" : "...",
    "id" : 12345,
    "negativeFont" : "...",
    "columnType" : "NODE_TYPE",
    "dimensionId" : 12345,
    "width" : 12345,
    "activeColumns" : [ "ACTUAL", "COMMITED" ],
    "positiveFont" : "..."
  } ],
  "rounding" : true,
  "budgetScale" : "THOUSANDS",
  "name" : "...",
  "setId" : 12345,
  "configurationInfo" : true,
  "yearSwitch" : true,
  "currencyView" : "REFERENCE"
} ],
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/category" : {
      "get" : {
        "tags" : [ "\/api/{version}/category" ],
        "description" : "",
        "operationId" : "getCategories",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "active categories",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_CategoryViewBase"
}
            },
            "example" : [ {
  "name" : "...",
  "categoryId" : 12345,
  "color" : "...",
  "active" : true
} ],
            "description" : "active categories"
          }
        }
      }
    }
    ,
    "\/api/{version}/category/all" : {
      "get" : {
        "tags" : [ "\/api/{version}/category/all" ],
        "description" : "",
        "operationId" : "getAllCategories",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "all categories",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_CategoryViewBase"
}
            },
            "example" : [ {
  "name" : "...",
  "categoryId" : 12345,
  "color" : "...",
  "active" : true
} ],
            "description" : "all categories"
          }
        }
      }
    }
    ,
    "\/api/{version}/category/{categoryId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/category/{categoryId}" ],
        "description" : "",
        "operationId" : "getCategory",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "categoryId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_CategoryViewBase"
            },
            "example" : {
  "name" : "...",
  "categoryId" : 12345,
  "color" : "...",
  "active" : true
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/comment/node/{nodeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/comment/node/{nodeId}" ],
        "summary" : "Return page of comments, mentioned users will be in format [~login] for example  [~ivan.",
        "description" : "Return page of comments, mentioned users will be in format [~login] for example  [~ivan.ivan]\nIf there is no creator in response, this means that the user is deleted.",
        "operationId" : "getNodeComments",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>NodeCommentViewBase<\/code>"
          }
        }
      }
      ,
      "post" : {
        "tags" : [ "\/api/{version}/comment/node/{nodeId}" ],
        "summary" : "Create comment for node.",
        "description" : "Create comment for node. To mention user in the comment use '[~login]' for example [~my.username]",
        "operationId" : "createComment",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_NodeCommentRequestBody"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_NodeCommentViewBase"
            },
            "example" : {
  "commentDate" : "...",
  "creator" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "nodeId" : 12345,
  "id" : 12345,
  "comment" : "..."
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/comment/{id}" : {
      "get" : {
        "tags" : [ "\/api/{version}/comment/{id}" ],
        "summary" : "Return comment, mentioned users will be in format [~login]\nIf there is no creator in response, this means that the user is deleted.",
        "description" : "Return comment, mentioned users will be in format [~login]\nIf there is no creator in response, this means that the user is deleted.",
        "operationId" : "getNodeComment",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_NodeCommentViewBase"
            },
            "example" : {
  "commentDate" : "...",
  "creator" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "nodeId" : 12345,
  "id" : 12345,
  "comment" : "..."
},
            "description" : ""
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/comment/{id}" ],
        "description" : "",
        "operationId" : "editComment",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_NodeCommentRequestBody"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/comment/{id}" ],
        "description" : "",
        "operationId" : "deleteComment",
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/content/node/{nodeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/content/node/{nodeId}" ],
        "summary" : "Get node's rich text content.",
        "description" : "Get node's rich text content",
        "operationId" : "getNodeContent",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "- node id for which to get content"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_AnnexContentViewBase"
            },
            "example" : {
  "text" : "...",
  "published" : true,
  "contentId" : 12345
},
            "description" : "content details"
          }
        }
      }
      ,
      "post" : {
        "tags" : [ "\/api/{version}/content/node/{nodeId}" ],
        "summary" : "Create or update content.",
        "description" : "Create or update content",
        "operationId" : "createUpdateNodeContent",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node of the content"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_AnnexContentViewBase"
            },
            "description" : "content text"
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_AnnexContentViewBase"
            },
            "example" : {
  "text" : "...",
  "published" : true,
  "contentId" : 12345
},
            "description" : "updated/created contet"
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/content/node/{nodeId}" ],
        "summary" : "Delete content of the node.",
        "description" : "Delete content of the node",
        "operationId" : "deleteNodeContent",
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/content/period/{periodId}" : {
      "post" : {
        "tags" : [ "\/api/{version}/content/period/{periodId}" ],
        "summary" : "Create/Update content.",
        "description" : "Create/Update content",
        "operationId" : "createUpdateContent",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "periodId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "- id of period for which this content will be"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_AnnexContentViewBase"
            },
            "description" : "- content details"
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_AnnexContentViewBase"
            },
            "example" : {
  "text" : "...",
  "published" : true,
  "contentId" : 12345
},
            "description" : "- newly created/updated content details"
          }
        }
      }
    }
    ,
    "\/api/{version}/content/slideshow" : {
      "post" : {
        "tags" : [ "\/api/{version}/content/slideshow" ],
        "description" : "",
        "operationId" : "getSlideshowHtml",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_SlideshowDTO"
            },
            "description" : "- object containing:\nslideshowElements - list of elements for the slideshow contining url, title and isVideo flag\nwidth - width for the slideshow - can have % at the end\nheight - height for the slideshow - can have % at the end"
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "the generated HTML for the slideshow",
"type" : "string"
            },
            "description" : "the generated HTML for the slideshow"
          }
        }
      }
    }
    ,
    "\/api/{version}/content/slideshow/url" : {
      "get" : {
        "tags" : [ "\/api/{version}/content/slideshow/url" ],
        "description" : "",
        "operationId" : "getSlideshowCssPath",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "the path to the slideshow css needed for correct display of the slideshow",
"type" : "string"
            },
            "description" : "the path to the slideshow css needed for correct display of the slideshow"
          }
        }
      }
    }
    ,
    "\/api/{version}/content/{periodId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/content/{periodId}" ],
        "summary" : "Find content.",
        "description" : "Find content",
        "operationId" : "getContent",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "periodId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "- period id for which to find content"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_AnnexContentViewBase"
            },
            "example" : {
  "text" : "...",
  "published" : true,
  "contentId" : 12345
},
            "description" : "- content details"
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/content/{periodId}" ],
        "summary" : "Delete content.",
        "description" : "Delete content",
        "operationId" : "deleteContent",
        "parameters" : [
          {
            "name" : "periodId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "- period id for which to delete content"
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/currency" : {
      "get" : {
        "tags" : [ "\/api/{version}/currency" ],
        "description" : "",
        "operationId" : "getAllCurrencies",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "all currencies",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_BMCurrencyView"
}
            },
            "example" : [ {
  "symbol" : "...",
  "id" : 12345,
  "shortName" : "..."
} ],
            "description" : "all currencies"
          }
        }
      }
    }
    ,
    "\/api/{version}/dimension" : {
      "get" : {
        "tags" : [ "\/api/{version}/dimension" ],
        "description" : "",
        "operationId" : "getDimensions",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "includeArchived",
            "in" : "query",
            "required" : true,
            "default" : "false",
            "type" : "boolean",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "if 'includeArchived' is present return all dimension, if not present return non archived dimensions",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_DimensionViewBase"
}
            },
            "example" : [ {
  "id" : 12345,
  "type" : "TEXT_DIMENSION_TYPE",
  "required" : true,
  "inheritable" : true,
  "name" : "...",
  "readOnly" : true,
  "archived" : true,
  "copyable" : true,
  "info" : "..."
} ],
            "description" : "if 'includeArchived' is present return all dimension, if not present return non archived dimensions"
          }
        }
      }
    }
    ,
    "\/api/{version}/dimension/node/{nodeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/dimension/node/{nodeId}" ],
        "summary" : "Return all dimension values for given node.",
        "description" : "Return all dimension values for given node.",
        "operationId" : "getDimensionsWithValuesForNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "dimensionType",
            "in" : "query",
            "required" : false,
            "type" : "string",
            "enum" : ["CONTINUES_TEXT_DIMENSION_TYPE", "MW_SELECTABLE_DIMENSION_TYPE", "M_SELECTABLE_DIMENSION_TYPE", "SELECTABLE_DIMENSION_TYPE", "STRUCTURED_TEXT_DIMENSION_TYPE", "TEXT_DIMENSION_TYPE"],
            "description" : "not required, if presented then returns only values for the dimension type"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_DimensionNodeValueDTO"
}
            },
            "example" : [ {
  "dimensionId" : 12345,
  "dimensionType" : "TEXT_DIMENSION_TYPE",
  "values" : [ {
    "value" : "...",
    "id" : 12345,
    "weight" : 12345.0
  }, {
    "value" : "...",
    "id" : 12345,
    "weight" : 12345.0
  } ]
} ],
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/dimension/{dimId}/node/{nodeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/dimension/{dimId}/node/{nodeId}" ],
        "summary" : "Return List of dimension values for node.",
        "description" : "Return List of dimension values for node.",
        "operationId" : "getDimensionValueForNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "dimId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_DimensionValueViewBase"
}
            },
            "example" : [ {
  "value" : "...",
  "id" : 12345,
  "weight" : 12345.0
} ],
            "description" : ""
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/dimension/{dimId}/node/{nodeId}" ],
        "summary" : "set dimension values for node.",
        "description" : "set dimension values for node. If node has already previously added values, they will be deleted.<br/>\nTo remove values should send empty array <code>[]<\/code>.\nIf the dimension is mark as 'required' and try to remove all values, http error with status 400 will be return.<br/>\nTo update 'selectable' type dimensions (single, multi) 'id' field will be used, for 'text' type dimensions\n(text, structured and continuous) 'value' field will be used.<br/>\nFor 'multi weight selectable' dimesion type, fields 'id' and 'weight' will be used to update dimension.",
        "operationId" : "editDimensionNodeValues",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "dimId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "Should be array of DimensionValue",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_DimensionValueViewBase"
}
            },
            "description" : "Should be array of DimensionValue"
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/dimension/{id}" : {
      "get" : {
        "tags" : [ "\/api/{version}/dimension/{id}" ],
        "description" : "",
        "operationId" : "getDimension",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_DimensionViewBase"
            },
            "example" : {
  "id" : 12345,
  "type" : "SELECTABLE_DIMENSION_TYPE",
  "required" : true,
  "inheritable" : true,
  "name" : "...",
  "readOnly" : true,
  "archived" : true,
  "copyable" : true,
  "info" : "..."
},
            "description" : ""
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/dimension/{id}" ],
        "description" : "",
        "operationId" : "editDimension",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_DimensionViewBase"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/dimension/{id}/possible-values" : {
      "get" : {
        "tags" : [ "\/api/{version}/dimension/{id}/possible-values" ],
        "summary" : "Get dimension possible values for given dimension.",
        "description" : "Get dimension possible values for given dimension",
        "operationId" : "getDimensionValues",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_DimensionPossibleValueDTO"
}
            },
            "example" : [ {
  "parentValueId" : 12345,
  "value" : "...",
  "valueId" : 12345
} ],
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/exchange-rate/tree/{treeId}/currency/{currencyId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/exchange-rate/tree/{treeId}/currency/{currencyId}" ],
        "description" : "",
        "operationId" : "getExchangeRates",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "currencyId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "treeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_ExchangeRateDTO"
}
            },
            "example" : [ {
  "id" : 12345,
  "currencyId" : 12345,
  "referenceCurrencyId" : 12345,
  "exchangeRate" : 12345.0,
  "units" : 12345
} ],
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/fee" : {
      "get" : {
        "tags" : [ "\/api/{version}/fee" ],
        "description" : "",
        "operationId" : "getFees",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "limit",
            "in" : "query",
            "required" : false,
            "default" : "100",
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>FeeViewBase<\/code>"
          }
        }
      }
      ,
      "post" : {
        "tags" : [ "\/api/{version}/fee" ],
        "summary" : "Create a fee.",
        "description" : "Create a fee. For correct fee types use \"/fee/type\"",
        "operationId" : "createFee",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_FeeViewBase"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_FeeViewBase"
            },
            "example" : {
  "type" : "ABSOLUTE",
  "id" : 12345,
  "name" : "..."
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/fee-rate/tree/{treeId}" : {
      "post" : {
        "tags" : [ "\/api/{version}/fee-rate/tree/{treeId}" ],
        "summary" : "Create rates for given year(tree) and fee.",
        "description" : "Create rates for given year(tree) and fee.",
        "operationId" : "createFeeRates",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "treeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_FeeRateCreateBody"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_FeeRateDTO"
            },
            "example" : {
  "feeId" : 12345,
  "rate" : 12345.0,
  "id" : 12345,
  "startDate" : "..."
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/fee-rate/tree/{treeId}/fee/{feeId}" : {
      "delete" : {
        "tags" : [ "\/api/{version}/fee-rate/tree/{treeId}/fee/{feeId}" ],
        "summary" : "Delete fee rate.",
        "description" : "Delete fee rate",
        "operationId" : "deleteFeeRate",
        "parameters" : [
          {
            "name" : "feeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "treeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/fee-rate/tree/{treeId}/month/{month}" : {
      "get" : {
        "tags" : [ "\/api/{version}/fee-rate/tree/{treeId}/month/{month}" ],
        "summary" : "Get rates for given year and month.",
        "description" : "Get rates for given year and month.",
        "operationId" : "getFeeRates",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "month",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "enum" : ["APRIL", "AUGUST", "DECEMBER", "FEBRUARY", "JANUARY", "JULY", "JUNE", "MARCH", "MAY", "NOVEMBER", "OCTOBER", "SEPTEMBER"],
            "description" : "- java.time.Month values are accepted(JANUARY, FEBRUARY...)"
          },
          {
            "name" : "treeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "- id of the year(tree)"
          },
          {
            "name" : "limit",
            "in" : "query",
            "required" : false,
            "default" : "100",
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>FeeRateDTO<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/fee-rate/{rateId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/fee-rate/{rateId}" ],
        "description" : "",
        "operationId" : "getFeeRate",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "rateId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_FeeRateDTO"
            },
            "example" : {
  "feeId" : 12345,
  "rate" : 12345.0,
  "id" : 12345,
  "startDate" : "..."
},
            "description" : ""
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/fee-rate/{rateId}" ],
        "summary" : "Edit fee rate.",
        "description" : "Edit fee rate",
        "operationId" : "editFeeRate",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "rateId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_FeeRateEditBody"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/fee/node/{nodeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/fee/node/{nodeId}" ],
        "summary" : "Get assigned fees to the node.",
        "description" : "Get assigned fees to the node",
        "operationId" : "getFeeValues",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "limit",
            "in" : "query",
            "required" : false,
            "default" : "100",
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>FeeValueViewBase<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/fee/type" : {
      "get" : {
        "tags" : [ "\/api/{version}/fee/type" ],
        "description" : "",
        "operationId" : "getFeeTypes",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_FeeType"
}
            },
            "example" :  "...",
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/fee/{feeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/fee/{feeId}" ],
        "description" : "",
        "operationId" : "getFee",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "feeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_FeeViewBase"
            },
            "example" : {
  "type" : "ABSOLUTE",
  "id" : 12345,
  "name" : "..."
},
            "description" : ""
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/fee/{feeId}" ],
        "summary" : "Edit a fee.",
        "description" : "Edit a fee. For correct fee types use \"/fee/type\"",
        "operationId" : "editFee",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "feeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_FeeViewBase"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/fee/{feeId}" ],
        "description" : "",
        "operationId" : "deleteFee",
        "parameters" : [
          {
            "name" : "feeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/fee/{feeId}/node/{nodeId}" : {
      "delete" : {
        "tags" : [ "\/api/{version}/fee/{feeId}/node/{nodeId}" ],
        "summary" : "Delete fee from node.",
        "description" : "Delete fee from node",
        "operationId" : "deleteFeeForNode",
        "parameters" : [
          {
            "name" : "feeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "get" : {
        "tags" : [ "\/api/{version}/fee/{feeId}/node/{nodeId}" ],
        "summary" : "Get fee value for node.",
        "description" : "Get fee value for node. Returns 404(NOT_FOUND) when fee is not assigned to node or specified resources not found",
        "operationId" : "getFeeValuForNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "feeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_FeeValueViewBase"
            },
            "example" : {
  "feeName" : "...",
  "feeId" : 12345,
  "feeType" : "PERCENT",
  "nodeId" : 12345,
  "global" : true,
  "feeValueId" : 12345
},
            "description" : ""
          }
        }
      }
      ,
      "post" : {
        "tags" : [ "\/api/{version}/fee/{feeId}/node/{nodeId}" ],
        "summary" : "Assign fee to node.",
        "description" : "Assign fee to node. Global fee rates can be overridden. If empty body([]) is provided, then assign fee with global values.",
        "operationId" : "createFeeValuForNode",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "feeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_FeeNodeRatesDTO"
}
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_FeeValueViewBase"
            },
            "example" : {
  "feeName" : "...",
  "feeId" : 12345,
  "feeType" : "PERCENT",
  "nodeId" : 12345,
  "global" : true,
  "feeValueId" : 12345
},
            "description" : ""
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/fee/{feeId}/node/{nodeId}" ],
        "summary" : "Edit assigned fee to node.",
        "description" : "Edit assigned fee to node. Global fee rates can be overridden. If empty body([]) is provided, then assign fee with global values.",
        "operationId" : "editFeeValuForNode",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "feeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_FeeNodeRatesDTO"
}
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/fee/{feeId}/node/{nodeId}/tree/{treeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/fee/{feeId}/node/{nodeId}/tree/{treeId}" ],
        "summary" : "Get fee rates for given fee, node and tree(year).",
        "description" : "Get fee rates for given fee, node and tree(year). Returns 404(NOT_FOUND) when fee is not assigned to node or specified resources not found",
        "operationId" : "getFeeRatesForNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "feeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "treeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_FeeNodeRatesDTO"
            },
            "example" : {
  "treeId" : 12345,
  "rates" : {
    "property1" : {
      "feeId" : 12345,
      "rate" : 12345.0,
      "id" : 12345,
      "startDate" : "..."
    },
    "property2" : {
      "feeId" : 12345,
      "rate" : 12345.0,
      "id" : 12345,
      "startDate" : "..."
    }
  },
  "nodeId" : 12345,
  "feeId" : 12345
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/group" : {
      "get" : {
        "tags" : [ "\/api/{version}/group" ],
        "description" : "",
        "operationId" : "getGroups",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_GroupDTO"
}
            },
            "example" : [ {
  "id" : 12345,
  "name" : "...",
  "inherit" : true
} ],
            "description" : ""
          }
        }
      }
      ,
      "post" : {
        "tags" : [ "\/api/{version}/group" ],
        "description" : "",
        "operationId" : "createGroup",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_GroupDTO"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_GroupDTO"
            },
            "example" : {
  "id" : 12345,
  "name" : "...",
  "inherit" : true
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/group/node/{nodeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/group/node/{nodeId}" ],
        "description" : "",
        "operationId" : "getGroupsForNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_GroupDTO"
}
            },
            "example" : [ {
  "id" : 12345,
  "name" : "...",
  "inherit" : true
} ],
            "description" : ""
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/group/node/{nodeId}" ],
        "summary" : "set groups for node.",
        "description" : "set groups for node. If node has some previously created groups, they will be deleted.",
        "operationId" : "updateNodeGroups",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/group/{id}" : {
      "put" : {
        "tags" : [ "\/api/{version}/group/{id}" ],
        "description" : "",
        "operationId" : "editGroup",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_GroupDTO"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/group/{id}" ],
        "description" : "",
        "operationId" : "deleteGroup",
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "get" : {
        "tags" : [ "\/api/{version}/group/{id}" ],
        "description" : "",
        "operationId" : "getGroup",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_GroupDTO"
            },
            "example" : {
  "id" : 12345,
  "name" : "...",
  "inherit" : true
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/invoice/link/{invoiceId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/invoice/link/{invoiceId}" ],
        "summary" : "Link invoice to sunk cost.",
        "description" : "Link invoice to sunk cost",
        "operationId" : "linkInvoiceToSunkCost",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "invoiceId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "id of invoice to link"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "id of sunk cost to link to the invoice",
"type" : "integer",
"format" : "int32"
            },
            "description" : "id of sunk cost to link to the invoice"
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/invoice/linkAttachment/{invoiceId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/invoice/linkAttachment/{invoiceId}" ],
        "description" : "",
        "operationId" : "linkInvoiceToAttachment",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "invoiceId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "invoice to which to link"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "attachment to link to the invoice",
"type" : "integer",
"format" : "int32"
            },
            "description" : "attachment to link to the invoice"
          }
        ],
        "responses" : {
          "201" : {
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/invoice/linked/sunk-cost/{sunkCostId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/invoice/linked/sunk-cost/{sunkCostId}" ],
        "summary" : "Returns invoices linked to given sunk cost and tree.",
        "description" : "Returns invoices linked to given sunk cost and tree",
        "operationId" : "getLinkedToSunkCosts",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "sunkCostId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "sunk cost id"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_BillDTO"
}
            },
            "example" : [ {
  "costCenter" : "...",
  "amount" : 12345.0,
  "referenceNumber" : "...",
  "date" : "...",
  "supplier" : "...",
  "number" : "...",
  "name" : "...",
  "id" : 12345,
  "costType" : "...",
  "jobNumber" : "...",
  "responsiblePerson" : "...",
  "paid" : true,
  "note" : "...",
  "bookingDate" : "..."
} ],
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/invoice/node/{nodeId}" : {
      "post" : {
        "tags" : [ "\/api/{version}/invoice/node/{nodeId}" ],
        "summary" : "Create invoice.",
        "description" : "Create invoice",
        "operationId" : "createBill",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id"
          },
          {
            "name" : "forseResize",
            "in" : "query",
            "required" : true,
            "type" : "boolean",
            "description" : "set parameter to true to resize the node if required"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_BillDTO"
            },
            "description" : "'value' and 'date' are required fields"
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_BillDTO"
            },
            "example" : {
  "costCenter" : "...",
  "amount" : 12345.0,
  "referenceNumber" : "...",
  "date" : "...",
  "supplier" : "...",
  "number" : "...",
  "name" : "...",
  "id" : 12345,
  "costType" : "...",
  "jobNumber" : "...",
  "responsiblePerson" : "...",
  "paid" : true,
  "note" : "...",
  "bookingDate" : "..."
},
            "description" : ""
          }
        }
      }
      ,
      "get" : {
        "tags" : [ "\/api/{version}/invoice/node/{nodeId}" ],
        "summary" : "Returns invoices.",
        "description" : "Returns invoices <code>AnnexBillViewBase<\/code> of node paginated.",
        "operationId" : "getBillsForNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id"
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : "not required"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/invoice/unlink/{invoiceId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/invoice/unlink/{invoiceId}" ],
        "summary" : "Unlink invoice from sunk cost.",
        "description" : "Unlink invoice from sunk cost",
        "operationId" : "unlinkInvoiceToSunkCost",
        "parameters" : [
          {
            "name" : "invoiceId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "id of invoice to unlink"
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/invoice/{id}" : {
      "get" : {
        "tags" : [ "\/api/{version}/invoice/{id}" ],
        "description" : "",
        "operationId" : "getBill",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_BillDTO"
            },
            "example" : {
  "costCenter" : "...",
  "amount" : 12345.0,
  "referenceNumber" : "...",
  "date" : "...",
  "supplier" : "...",
  "number" : "...",
  "name" : "...",
  "id" : 12345,
  "costType" : "...",
  "jobNumber" : "...",
  "responsiblePerson" : "...",
  "paid" : true,
  "note" : "...",
  "bookingDate" : "..."
},
            "description" : ""
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/invoice/{id}" ],
        "description" : "",
        "operationId" : "deleteBill",
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/invoice/{id}" ],
        "summary" : "Edit invoice.",
        "description" : "Edit invoice",
        "operationId" : "editBill",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "invoice id"
          },
          {
            "name" : "forseResize",
            "in" : "query",
            "required" : true,
            "type" : "boolean",
            "description" : "set parameter to true to resize the node if required"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_BillDTO"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/kpi-definition" : {
      "post" : {
        "tags" : [ "\/api/{version}/kpi-definition" ],
        "summary" : "Creates kpi definition.",
        "description" : "Creates kpi definition",
        "operationId" : "createKpiDefinition",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_KPIDefinitionDTO"
            },
            "description" : "request body\n- for property analysisType see allowed values - \"/kpi-definition/analysis-types\"\n- for property type see allowed values  - \"/kpi-definition/types\""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_KPIDefinitionDTO"
            },
            "example" : {
  "value" : "...",
  "minRate" : 12345,
  "kpiSets" : [ {
    "id" : 12345,
    "name" : "..."
  }, {
    "id" : 12345,
    "name" : "..."
  } ],
  "id" : 12345,
  "required" : true,
  "name" : "...",
  "maxRate" : 12345,
  "analysisType" : "none",
  "type" : "constant",
  "archived" : true,
  "kpiInfo" : "..."
},
            "description" : ""
          }
        }
      }
      ,
      "get" : {
        "tags" : [ "\/api/{version}/kpi-definition" ],
        "description" : "",
        "operationId" : "getKpiDefinitions",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "limit",
            "in" : "query",
            "required" : false,
            "default" : "100",
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "loadSets",
            "in" : "query",
            "required" : true,
            "type" : "boolean",
            "description" : ""
          },
          {
            "name" : "name",
            "in" : "query",
            "required" : false,
            "default" : "",
            "type" : "string",
            "description" : "search name"
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/kpi-definition/system" : {
      "get" : {
        "tags" : [ "\/api/{version}/kpi-definition/system" ],
        "summary" : "return names of system kpis that can be used : 'sumBills', 'sumBudgets', 'sumEstimates', 'sumProjected', 'sumRemaining', 'sumMDF', 'sumTarget'.",
        "description" : "return names of system kpis that can be used : 'sumBills', 'sumBudgets', 'sumEstimates', 'sumProjected', 'sumRemaining', 'sumMDF', 'sumTarget'",
        "operationId" : "getSystemKpis",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "type" : "object"
}
            },
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/kpi-definition/{kpiDefinitionId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/kpi-definition/{kpiDefinitionId}" ],
        "description" : "",
        "operationId" : "editKpiDefinition",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "kpiDefinitionId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_KPIDefinitionDTO"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/kpi-definition/{kpiDefinitionId}" ],
        "description" : "",
        "operationId" : "deleteKpiDefinition",
        "parameters" : [
          {
            "name" : "kpiDefinitionId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "get" : {
        "tags" : [ "\/api/{version}/kpi-definition/{kpiDefinitionId}" ],
        "description" : "",
        "operationId" : "geKpiDefinitionById",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "kpiDefinitionId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "loadSets",
            "in" : "query",
            "required" : true,
            "type" : "boolean",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_KPIDefinitionDTO"
            },
            "example" : {
  "value" : "...",
  "minRate" : 12345,
  "kpiSets" : [ {
    "id" : 12345,
    "name" : "..."
  }, {
    "id" : 12345,
    "name" : "..."
  } ],
  "id" : 12345,
  "required" : true,
  "name" : "...",
  "maxRate" : 12345,
  "analysisType" : "none",
  "type" : "constant",
  "archived" : true,
  "kpiInfo" : "..."
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/kpi/node/{nodeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/kpi/node/{nodeId}" ],
        "description" : "",
        "operationId" : "getNodeKpis",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "treeId",
            "in" : "query",
            "required" : false,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_KpiDTO"
}
            },
            "example" : [ {
  "nodeId" : 12345,
  "target" : 12345.0,
  "infoText" : "...",
  "weight" : 12345,
  "date" : "...",
  "kpiDefinitionId" : 12345,
  "id" : 12345,
  "value" : 12345.0
} ],
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/kpi/node/{nodeId}/kpi-definition/{kpiDefinitionId}" : {
      "post" : {
        "tags" : [ "\/api/{version}/kpi/node/{nodeId}/kpi-definition/{kpiDefinitionId}" ],
        "description" : "",
        "operationId" : "createKpi",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "kpiDefinitionId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_KpiDTO"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_KpiDTO"
            },
            "example" : {
  "nodeId" : 12345,
  "target" : 12345.0,
  "infoText" : "...",
  "weight" : 12345,
  "date" : "...",
  "kpiDefinitionId" : 12345,
  "id" : 12345,
  "value" : 12345.0
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/kpi/{kpiId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/kpi/{kpiId}" ],
        "description" : "",
        "operationId" : "getKpiById",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "kpiId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_KpiDTO"
            },
            "example" : {
  "nodeId" : 12345,
  "target" : 12345.0,
  "infoText" : "...",
  "weight" : 12345,
  "date" : "...",
  "kpiDefinitionId" : 12345,
  "id" : 12345,
  "value" : 12345.0
},
            "description" : ""
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/kpi/{kpiId}" ],
        "description" : "",
        "operationId" : "deleteKpi",
        "parameters" : [
          {
            "name" : "kpiId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/kpi/{kpiId}" ],
        "description" : "",
        "operationId" : "editKpi",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "kpiId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_KpiDTO"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/managed-task" : {
      "post" : {
        "tags" : [ "\/api/{version}/managed-task" ],
        "summary" : "*Create managed task.",
        "description" : "*Create managed task",
        "operationId" : "create",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "createJob",
            "in" : "query",
            "required" : true,
            "default" : "true",
            "type" : "boolean",
            "description" : "default is true. Set to true if job manager's job must be created.\nSet this param to false and provide @param jobId to link job manager's job"
          },
          {
            "name" : "jobId",
            "in" : "query",
            "required" : false,
            "type" : "integer",
            "description" : "job manager's job id. Must be provided for job linking if @param createJob is false"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_ManageTaskCreateDTO"
            },
            "description" : "\//     * @param nodeId node id"
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_TaskDTO"
            },
            "example" : {
  "state" : "CANCELLED",
  "id" : 12345,
  "markerType" : 12345,
  "jobId" : 12345,
  "nodeId" : 12345,
  "responsibleUser" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "name" : "...",
  "info" : "...",
  "date" : "..."
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/managed-task/job/{jobId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/managed-task/job/{jobId}" ],
        "summary" : "Returns managed task by given jobId(job manager's job id).",
        "description" : "Returns managed task by given jobId(job manager's job id)",
        "operationId" : "getManagedTaskByJobId",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "jobId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_TaskDTO"
            },
            "example" : {
  "state" : "IN_PROGRESS",
  "id" : 12345,
  "markerType" : 12345,
  "jobId" : 12345,
  "nodeId" : 12345,
  "responsibleUser" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "name" : "...",
  "info" : "...",
  "date" : "..."
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/managed-task/{taskId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/managed-task/{taskId}" ],
        "summary" : "Edit managed task's responsible person, marker type and description.",
        "description" : "Edit managed task's responsible person, marker type and description",
        "operationId" : "editManagedTask",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "taskId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "task id"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_EditMTaskRequestBody"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/marker" : {
      "get" : {
        "deprecated":true,
        "tags" : [ "\/api/{version}/marker" ],
        "summary" : ".",
        "description" : "<p>available task symbols and their groups :\n<table border=\"1\">\n<tr>\n<th>group<\/th>\n<th>from id<\/th>\n<th>to id<\/th>\n<\/tr><tr>\n<td>priority<\/td>\n<td>20<\/td>\n<td>24<\/td>\n<\/tr><tr>\n<td>state<\/td>\n<td>30<\/td>\n<td>34<\/td>\n<\/tr><tr>\n<td>flags<\/td>\n<td>40<\/td>\n<td>46<\/td>\n<\/tr><tr>\n<td>traffic lights<\/td>\n<td>50<\/td>\n<td>53<\/td>\n<\/tr><tr>\n<td>smileys<\/td>\n<td>60<\/td>\n<td>63<\/td>\n<\/tr><tr>\n<td>arrows<\/td>\n<td>70<\/td>\n<td>81<\/td>\n<\/tr><tr>\n<td>events<\/td>\n<td>90<\/td>\n<td>97<\/td>\n<\/tr><tr>\n<td>communication<\/td>\n<td>121<\/td>\n<td>127<\/td>\n<\/tr><tr>\n<td>others<\/td>\n<td>100<\/td>\n<td>115<\/td>\n<\/tr>\n<\/table>",
        "operationId" : "getMarkers",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "array with all markers ids",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "description" : "array with all markers ids"
          }
        }
      }
    }
    ,
    "\/api/{version}/marker-categories" : {
      "get" : {
        "tags" : [ "\/api/{version}/marker-categories" ],
        "description" : "",
        "operationId" : "getMarkerCategories",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "array with all marker categories",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_MarkerTypeCategoryView"
}
            },
            "example" : [ {
  "active" : true,
  "predefined" : true,
  "name" : "...",
  "id" : 12345
} ],
            "description" : "array with all marker categories"
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/marker-categories" ],
        "summary" : "Update marker categories.",
        "description" : "Update marker categories",
        "operationId" : "updateMarkerCategories",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_MarkerTypeCategoryViewBase"
}
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "post" : {
        "tags" : [ "\/api/{version}/marker-categories" ],
        "summary" : "Create new marker category.",
        "description" : "Create new marker category",
        "operationId" : "createMarkerCategories",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_MarkerTypeCategoryViewBase"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_MarkerTypeCategoryView"
            },
            "example" : {
  "active" : true,
  "predefined" : true,
  "name" : "...",
  "id" : 12345
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/marker-categories/{categoryId}" : {
      "delete" : {
        "tags" : [ "\/api/{version}/marker-categories/{categoryId}" ],
        "summary" : "Delete marker category.",
        "description" : "Delete marker category",
        "operationId" : "deleteMarkerCategory",
        "parameters" : [
          {
            "name" : "categoryId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/marker/node/{nodeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/marker/node/{nodeId}" ],
        "description" : "",
        "operationId" : "getMarkersOfNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "id of node element"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "array of marker ids",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "description" : "array of marker ids"
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/marker/node/{nodeId}" ],
        "summary" : "delete markers for given node.",
        "description" : "delete markers for given node",
        "operationId" : "removeNodeMarkers",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "id of node"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "marker ids",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "description" : "marker ids"
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/marker/node/{nodeId}" ],
        "summary" : "params :.",
        "description" : "params : <\/br>\nnodeId - int <\/br>\nmarkerTypes - int[] <\/br>",
        "operationId" : "addMarkersToNode",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/markers" : {
      "get" : {
        "tags" : [ "\/api/{version}/markers" ],
        "description" : "",
        "operationId" : "getMarkerTypes",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "array with all markers",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_MarkerTypeViewBase"
}
            },
            "example" : [ {
  "active" : true,
  "predefined" : true,
  "fileId" : 12345,
  "categoryId" : 12345,
  "id" : 12345,
  "name" : "..."
} ],
            "description" : "array with all markers"
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/markers" ],
        "summary" : "Update marker types.",
        "description" : "Update marker types. Image can be replaced as base64 string. File type must be provided along with the base64 string",
        "operationId" : "updateMarkers",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_MarkerTypeRequestBody"
}
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "post" : {
        "tags" : [ "\/api/{version}/markers" ],
        "summary" : "Create ne marker types.",
        "description" : "Create ne marker types. Image is attached as base64 string. File type must be provided along with the base64 string",
        "operationId" : "createMarkers",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_MarkerTypeRequestBody"
}
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "description" : ""
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/markers" ],
        "summary" : "Delete marker type.",
        "description" : "Delete marker type. Multiple ids can be provided in the form ?markerIds=<xxx>&markerIds=<yyy>&...",
        "operationId" : "deleteMarkers",
        "parameters" : [
          {
            "name" : "markerIds",
            "in" : "query",
            "required" : true,
            "type" : "array",
            "items" : {
            "type" : "integer"
            },
            "collectionFormat" : "multi",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/markers/download/{markerId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/markers/download/{markerId}" ],
        "description" : "",
        "operationId" : "downloadMarker",
        "parameters" : [
          {
            "name" : "markerId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "marker to download"
          }
        ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/mdf" : {
      "get" : {
        "tags" : [ "\/api/{version}/mdf" ],
        "summary" : "Returns MDFs that are assigned to approver(if the user is approver).",
        "description" : "Returns MDFs that are assigned to approver(if the user is approver)",
        "operationId" : "getMdfsByState",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "state",
            "in" : "query",
            "required" : true,
            "type" : "string",
            "enum" : ["APPROVED", "PENDING", "REJECTED"],
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>MdfDTO<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/mdf/approve/{mdfId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/mdf/approve/{mdfId}" ],
        "summary" : "approve requested mdf or update already approved mdf.",
        "description" : "approve requested mdf or update already approved mdf",
        "operationId" : "approveMDF",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "mdfId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_MdfApproveBody"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/mdf/grant/node/{nodeId}" : {
      "post" : {
        "tags" : [ "\/api/{version}/mdf/grant/node/{nodeId}" ],
        "summary" : "create approved (grant) mdf.",
        "description" : "create approved (grant) mdf",
        "operationId" : "createGrantedMDF",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_MdfGrantBody"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_MdfDTO"
            },
            "example" : {
  "state" : "PENDING",
  "requestDate" : "...",
  "approvalRejectedDate" : "...",
  "name" : "...",
  "value" : 12345.0,
  "billId" : 12345,
  "attachmentIds" : [ 12345, 12345 ],
  "approverUserId" : 12345,
  "id" : 12345,
  "nodeId" : 12345
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/mdf/node/{nodeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/mdf/node/{nodeId}" ],
        "description" : "",
        "operationId" : "getMdfsForNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>MdfDTO<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/mdf/reject/{mdfId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/mdf/reject/{mdfId}" ],
        "description" : "",
        "operationId" : "rejectMDF",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "mdfId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "",
"type" : "file"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/mdf/request/node/{nodeId}" : {
      "post" : {
        "tags" : [ "\/api/{version}/mdf/request/node/{nodeId}" ],
        "summary" : "request new mdf with status 'PENDING'.",
        "description" : "request new mdf with status 'PENDING'",
        "operationId" : "createRequestedMDF",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_MdfRequestBody"
            },
            "description" : "- fields : 'name', 'approverUserId', 'billId' are mandatory"
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_MdfDTO"
            },
            "example" : {
  "state" : "APPROVED",
  "requestDate" : "...",
  "approvalRejectedDate" : "...",
  "name" : "...",
  "value" : 12345.0,
  "billId" : 12345,
  "attachmentIds" : [ 12345, 12345 ],
  "approverUserId" : 12345,
  "id" : 12345,
  "nodeId" : 12345
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/mdf/request/{mdfId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/mdf/request/{mdfId}" ],
        "summary" : "request again rejected mdf.",
        "description" : "request again rejected mdf",
        "operationId" : "updateToRequestedMDF",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "mdfId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_MdfRequestBody"
            },
            "description" : "- only fields 'comment' and 'attachmentIds' can be changed.\nAll other fields will be ignored"
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/mdf/requested" : {
      "get" : {
        "tags" : [ "\/api/{version}/mdf/requested" ],
        "summary" : "Returns MDFs that are requested by the user.",
        "description" : "Returns MDFs that are requested by the user",
        "operationId" : "getRequestedMdfs",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "states",
            "in" : "query",
            "required" : true,
            "type" : "array",
            "items" : {
            "type" : "string",
            "enum" : ["APPROVED", "PENDING", "REJECTED"]
            },
            "collectionFormat" : "multi",
            "description" : "- list of MDF's states that needs to be included"
          },
          {
            "name" : "treeId",
            "in" : "query",
            "required" : false,
            "type" : "integer",
            "description" : "- optional, if not provided all the years are included"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>MdfDTO<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/mdf/{id}" : {
      "get" : {
        "tags" : [ "\/api/{version}/mdf/{id}" ],
        "description" : "",
        "operationId" : "getMdf",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_MdfDTO"
            },
            "example" : {
  "state" : "REJECTED",
  "requestDate" : "...",
  "approvalRejectedDate" : "...",
  "name" : "...",
  "value" : 12345.0,
  "billId" : 12345,
  "attachmentIds" : [ 12345, 12345 ],
  "approverUserId" : 12345,
  "id" : 12345,
  "nodeId" : 12345
},
            "description" : "mdf"
          }
        }
      }
    }
    ,
    "\/api/{version}/mdf/{mdfId}/comment" : {
      "get" : {
        "tags" : [ "\/api/{version}/mdf/{mdfId}/comment" ],
        "description" : "",
        "operationId" : "getMdfComments",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "mdfId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_MDFCommentViewBase"
            },
            "example" : {
  "date" : "...",
  "user" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "comment" : "..."
},
            "description" : "Page with <code>MDFCommentDTO<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/module/all" : {
      "get" : {
        "tags" : [ "\/api/{version}/module/all" ],
        "summary" : "Returns module codes which are defined in Maps as Subnavigation entries - Calendar view, Budget view and so on.",
        "description" : "Returns module codes which are defined in Maps as Subnavigation entries - Calendar view, Budget view and so on.\nThe property 'canApplyView' indicates for which modules can be applied view (Calendar, Budget and Reports)",
        "operationId" : "getMapsModules",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_ModuleDTO"
}
            },
            "example" : [ {
  "moduleCode" : "...",
  "canApplyView" : true,
  "name" : "..."
} ],
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/module/generate-link" : {
      "post" : {
        "tags" : [ "\/api/{version}/module/generate-link" ],
        "summary" : "Generates link per module(optional) and view(optional).",
        "description" : "Generates link per module(optional) and view(optional)",
        "operationId" : "getModuleViewLink",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_ModuleLinkRequestBody"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"type" : "object",
"additionalProperties" : {
  "type" : "string"
}
            },
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/node-type" : {
      "get" : {
        "tags" : [ "\/api/{version}/node-type" ],
        "summary" : "Return active node types to use in node creation/edit.",
        "description" : "Return active node types to use in node creation/edit",
        "operationId" : "getNodeTypes",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_NodeTypeViewBase"
}
            },
            "example" : [ {
  "active" : true,
  "italic" : true,
  "backgroundColour" : "...",
  "name" : "...",
  "icon" : 12345,
  "id" : 12345,
  "bold" : true,
  "colour" : "...",
  "editable" : true
} ],
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/node-type/icons" : {
      "get" : {
        "tags" : [ "\/api/{version}/node-type/icons" ],
        "summary" : "Return all available icons for node types.",
        "description" : "Return all available icons for node types. Use the download rest point to get the actual icon",
        "operationId" : "getNodeTypeIcons",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_ElementTypeViewBase"
}
            },
            "example" : [ {
  "predefined" : true,
  "base64File" : "...",
  "id" : 12345,
  "fileType" : "...",
  "fileId" : 12345
} ],
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/node-type/icons/download/{typeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/node-type/icons/download/{typeId}" ],
        "description" : "",
        "operationId" : "downloadTypeIcon",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "typeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "element type to download"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "",
"type" : "string"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "file"
            },
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/node/child/{nodeId}/from-tree/{fromTreeId}/to-tree/{toTreeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/node/child/{nodeId}/from-tree/{fromTreeId}/to-tree/{toTreeId}" ],
        "summary" : "Returns children for given node between start date from.",
        "description" : "Returns children for given node between start date from <i>fromTreeId<\/i> and end date for <i>toTreeId<\/i>, paginated <\/br>\nparams : <\/br>",
        "operationId" : "getChildNodes",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "fromTreeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "id from <code>Tree<\/code>"
          },
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id <\/br>"
          },
          {
            "name" : "toTreeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "id to <code>Tree<\/code>"
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : "not required"
          },
          {
            "name" : "withAdditionalInfo",
            "in" : "query",
            "required" : true,
            "default" : "false",
            "type" : "boolean",
            "description" : "not required. If param exists with return <code>NodeDTO<\/code> with filled all fields"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>NodeDTO<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/node/externalId/{externalId}" : {
      "get" : {
        "deprecated":true,
        "tags" : [ "\/api/{version}/node/externalId/{externalId}" ],
        "description" : "",
        "operationId" : "getNodeByExternalId",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "externalId",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : "- external ID of the node"
          },
          {
            "name" : "withAdditionalInfo",
            "in" : "query",
            "required" : true,
            "default" : "false",
            "type" : "boolean",
            "description" : "- not required. If param exists with return <code>NodeDetailsDTO<\/code>"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_NodeDTO"
            },
            "example" : {
  "parentId" : 12345,
  "startDate" : "...",
  "endDate" : "...",
  "currencyId" : 12345,
  "externalId" : "...",
  "id" : 12345,
  "name" : "...",
  "info" : "...",
  "respPerson" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "leaf" : true,
  "nodeType" : {
    "active" : true,
    "italic" : true,
    "backgroundColour" : "...",
    "name" : "...",
    "icon" : 12345,
    "id" : 12345,
    "bold" : true,
    "colour" : "...",
    "editable" : true
  }
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/node/managed-task/{managedTaskJobId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/node/managed-task/{managedTaskJobId}" ],
        "summary" : "Return Node information.",
        "description" : "Return Node information.Set @param withAdditionalInfo to true if you want to get additional information about the node, like externalId, currency, description, responsible person ..",
        "operationId" : "getNodeByManagedTaskJobId",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "managedTaskJobId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "withAdditionalInfo",
            "in" : "query",
            "required" : true,
            "default" : "false",
            "type" : "boolean",
            "description" : "- not required"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_NodeDTO"
            },
            "example" : {
  "parentId" : 12345,
  "startDate" : "...",
  "endDate" : "...",
  "currencyId" : 12345,
  "externalId" : "...",
  "id" : 12345,
  "name" : "...",
  "info" : "...",
  "respPerson" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "leaf" : true,
  "nodeType" : {
    "active" : true,
    "italic" : true,
    "backgroundColour" : "...",
    "name" : "...",
    "icon" : 12345,
    "id" : 12345,
    "bold" : true,
    "colour" : "...",
    "editable" : true
  }
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/node/root/{treeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/node/root/{treeId}" ],
        "description" : "",
        "operationId" : "getRootNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "treeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_NodeDTO"
            },
            "example" : {
  "parentId" : 12345,
  "startDate" : "...",
  "endDate" : "...",
  "currencyId" : 12345,
  "externalId" : "...",
  "id" : 12345,
  "name" : "...",
  "info" : "...",
  "respPerson" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "leaf" : true,
  "nodeType" : {
    "active" : true,
    "italic" : true,
    "backgroundColour" : "...",
    "name" : "...",
    "icon" : 12345,
    "id" : 12345,
    "bold" : true,
    "colour" : "...",
    "editable" : true
  }
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/node/user-assigned" : {
      "get" : {
        "tags" : [ "\/api/{version}/node/user-assigned" ],
        "summary" : "Returns nodes of the user where the user is assigned like responsible user of the node.",
        "description" : "Returns nodes of the user where the user is assigned like responsible user of the node",
        "operationId" : "getAssignedNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : "- optional"
          },
          {
            "name" : "treeId",
            "in" : "query",
            "required" : false,
            "type" : "integer",
            "description" : "- optional. If provided, only the nodes within the tree is returned"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>NodeDTO<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/node/{id}" : {
      "get" : {
        "tags" : [ "\/api/{version}/node/{id}" ],
        "summary" : "Return node details by node id.",
        "description" : "Return node details by node id. Set @param withAdditionalInfo to true if you want to get additional information about the node, like externalId, currency, description, responsible person ..",
        "operationId" : "getNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "withAdditionalInfo",
            "in" : "query",
            "required" : true,
            "default" : "false",
            "type" : "boolean",
            "description" : "- not required"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_NodeDTO"
            },
            "example" : {
  "parentId" : 12345,
  "startDate" : "...",
  "endDate" : "...",
  "currencyId" : 12345,
  "externalId" : "...",
  "id" : 12345,
  "name" : "...",
  "info" : "...",
  "respPerson" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "leaf" : true,
  "nodeType" : {
    "active" : true,
    "italic" : true,
    "backgroundColour" : "...",
    "name" : "...",
    "icon" : 12345,
    "id" : 12345,
    "bold" : true,
    "colour" : "...",
    "editable" : true
  }
},
            "description" : ""
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/node/{id}" ],
        "description" : "",
        "operationId" : "deleteNode",
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/node/{nodeId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/node/{nodeId}" ],
        "summary" : "If the dates extend parent node, it will be resized automatically.",
        "description" : "If the dates extend parent node, it will be resized automatically. For nodeTypeId property see NodeTypeRestController#getNodeTypes().",
        "operationId" : "editNode",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_EditNodeRequestBody"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/node/{nodeId}/copy/{parentId}" : {
      "post" : {
        "tags" : [ "\/api/{version}/node/{nodeId}/copy/{parentId}" ],
        "summary" : "Copy node to parent.",
        "description" : "Copy node to parent. If there is exceed between the copied node and parent node dates, @param resizeType will be used.",
        "operationId" : "copy",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id"
          },
          {
            "name" : "parentId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "new parent node id"
          },
          {
            "name" : "resizeType",
            "in" : "query",
            "required" : false,
            "default" : "",
            "type" : "string",
            "description" : "not required. Default is extendParent(extend dates of parent). If presented value \"shrinkChild\" will shrink the dates of child"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_NodeCopyRequestBody"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_NodeDTO"
            },
            "example" : {
  "parentId" : 12345,
  "startDate" : "...",
  "endDate" : "...",
  "currencyId" : 12345,
  "externalId" : "...",
  "id" : 12345,
  "name" : "...",
  "info" : "...",
  "respPerson" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "leaf" : true,
  "nodeType" : {
    "active" : true,
    "italic" : true,
    "backgroundColour" : "...",
    "name" : "...",
    "icon" : 12345,
    "id" : 12345,
    "bold" : true,
    "colour" : "...",
    "editable" : true
  }
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/node/{nodeId}/deeplink" : {
      "get" : {
        "tags" : [ "\/api/{version}/node/{nodeId}/deeplink" ],
        "summary" : "Return deeplink for calendar and budget views.",
        "description" : "Return deeplink for calendar and budget views",
        "operationId" : "getNodeDeeplink",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id"
          },
          {
            "name" : "treeId",
            "in" : "query",
            "required" : false,
            "type" : "integer",
            "description" : "optional parameter"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_NodeDeeplinkDTO"
            },
            "example" : {
  "calendarLink" : "...",
  "budgetLink" : "...",
  "node" : {
    "parentId" : 12345,
    "startDate" : "...",
    "endDate" : "...",
    "currencyId" : 12345,
    "externalId" : "...",
    "id" : 12345,
    "name" : "...",
    "info" : "...",
    "respPerson" : {
      "lastName" : "...",
      "login" : "...",
      "firstName" : "...",
      "userId" : 12345
    },
    "leaf" : true,
    "nodeType" : {
      "active" : true,
      "italic" : true,
      "backgroundColour" : "...",
      "name" : "...",
      "icon" : 12345,
      "id" : 12345,
      "bold" : true,
      "colour" : "...",
      "editable" : true
    }
  }
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/node/{nodeId}/move/{parentId}" : {
      "post" : {
        "tags" : [ "\/api/{version}/node/{nodeId}/move/{parentId}" ],
        "summary" : "Move node to parent.",
        "description" : "Move node to parent. If there is exceed between the copied node and parent node dates, @param resizeType will be used.",
        "operationId" : "move",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id"
          },
          {
            "name" : "parentId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "new parent node id"
          },
          {
            "name" : "afterNodeId",
            "in" : "query",
            "required" : false,
            "type" : "integer",
            "description" : "not required. After which node to move the node that is moved. Default is at first position of the parent"
          },
          {
            "name" : "resizeType",
            "in" : "query",
            "required" : false,
            "default" : "",
            "type" : "string",
            "description" : "not required. Default is extendParent(extend dates of parent). If presented value \"shrinkChild\" will shrink the dates of child"
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_NodeDTO"
            },
            "example" : {
  "parentId" : 12345,
  "startDate" : "...",
  "endDate" : "...",
  "currencyId" : 12345,
  "externalId" : "...",
  "id" : 12345,
  "name" : "...",
  "info" : "...",
  "respPerson" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "leaf" : true,
  "nodeType" : {
    "active" : true,
    "italic" : true,
    "backgroundColour" : "...",
    "name" : "...",
    "icon" : 12345,
    "id" : 12345,
    "bold" : true,
    "colour" : "...",
    "editable" : true
  }
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/node/{parentId}" : {
      "post" : {
        "tags" : [ "\/api/{version}/node/{parentId}" ],
        "summary" : "Create node or child node.",
        "description" : "Create node or child node. For nodeTypeId property see NodeTypeRestController#getNodeTypes().\nIf type is not specified or is wrong, default type 'Standard' will be used.\nIf the dates extend parent node, it will be resized automatically.To set node as never expire : 9999-12-31",
        "operationId" : "create2",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "parentId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "parent node id"
          },
          {
            "name" : "prevSiblingId",
            "in" : "query",
            "required" : false,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_CreateNodeRequestBody"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_NodeDTO"
            },
            "example" : {
  "parentId" : 12345,
  "startDate" : "...",
  "endDate" : "...",
  "currencyId" : 12345,
  "externalId" : "...",
  "id" : 12345,
  "name" : "...",
  "info" : "...",
  "respPerson" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "leaf" : true,
  "nodeType" : {
    "active" : true,
    "italic" : true,
    "backgroundColour" : "...",
    "name" : "...",
    "icon" : 12345,
    "id" : 12345,
    "bold" : true,
    "colour" : "...",
    "editable" : true
  }
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/period/node/{nodeId}" : {
      "post" : {
        "tags" : [ "\/api/{version}/period/node/{nodeId}" ],
        "description" : "",
        "operationId" : "create3",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_AnnexPeriodViewBase"
            },
            "description" : "startDate, endDate, categoryId is required"
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_AnnexPeriodViewBase"
            },
            "example" : {
  "categoryId" : 12345,
  "endDate" : "...",
  "startDate" : "...",
  "name" : "...",
  "id" : 12345
},
            "description" : ""
          }
        }
      }
      ,
      "get" : {
        "tags" : [ "\/api/{version}/period/node/{nodeId}" ],
        "summary" : "Return paginated periods(timelines) of the node.",
        "description" : "Return paginated periods(timelines) of the node",
        "operationId" : "getNodePeriods",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "id of the node"
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>AnnexPeriodViewBase<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/period/node/{nodeId}/tree/{treeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/period/node/{nodeId}/tree/{treeId}" ],
        "summary" : "Returns period data of node for given tree(year).",
        "description" : "Returns period data of node for given tree(year)",
        "operationId" : "getPeriodsBy",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id"
          },
          {
            "name" : "treeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "tree id"
          },
          {
            "name" : "getByCriteria",
            "in" : "query",
            "required" : false,
            "default" : "",
            "type" : "string",
            "description" : "optional parameter. Allowed values - \"category\" and \"name\""
          },
          {
            "name" : "getByCriteriaValue",
            "in" : "query",
            "required" : false,
            "default" : "",
            "type" : "string",
            "description" : "mandatory if @param getByCriteria is presented, allowed values - category id or period name"
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : "not required"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>AnnexPeriodViewBase<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/period/{id}" : {
      "get" : {
        "tags" : [ "\/api/{version}/period/{id}" ],
        "description" : "",
        "operationId" : "getPeriod",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_AnnexPeriodViewBase"
            },
            "example" : {
  "categoryId" : 12345,
  "endDate" : "...",
  "startDate" : "...",
  "name" : "...",
  "id" : 12345
},
            "description" : ""
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/period/{id}" ],
        "description" : "",
        "operationId" : "deletePeriod",
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/period/{id}" ],
        "description" : "",
        "operationId" : "editPeriod",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_AnnexPeriodViewBase"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/permissions/global/current-user" : {
      "get" : {
        "tags" : [ "\/api/{version}/permissions/global/current-user" ],
        "description" : "",
        "operationId" : "getUserGlobalPermissions",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "approver",
            "in" : "query",
            "required" : true,
            "type" : "boolean",
            "description" : ""
          },
          {
            "name" : "mandatorId",
            "in" : "query",
            "required" : false,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "userPermission",
            "in" : "query",
            "required" : false,
            "type" : "string",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "",
"type" : "file"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "type" : "string"
}
            },
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/permissions/node/{nodeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/permissions/node/{nodeId}" ],
        "description" : "",
        "operationId" : "getNodePermissions",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "approver",
            "in" : "query",
            "required" : true,
            "type" : "boolean",
            "description" : ""
          },
          {
            "name" : "mandatorId",
            "in" : "query",
            "required" : false,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "userPermission",
            "in" : "query",
            "required" : false,
            "type" : "string",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "",
"type" : "file"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "type" : "string"
}
            },
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/permissions/rights/current-user" : {
      "get" : {
        "deprecated":true,
        "tags" : [ "\/api/{version}/permissions/rights/current-user" ],
        "description" : "",
        "operationId" : "getUserRights",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "approver",
            "in" : "query",
            "required" : true,
            "type" : "boolean",
            "description" : ""
          },
          {
            "name" : "mandatorId",
            "in" : "query",
            "required" : false,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "userPermission",
            "in" : "query",
            "required" : false,
            "type" : "string",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "",
"type" : "file"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "object",
"additionalProperties" : {
  "type" : "object"
}
            },
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/sunk-cost/link/{sunkCostId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/sunk-cost/link/{sunkCostId}" ],
        "summary" : "Link invoices to sunk cost.",
        "description" : "Link invoices to sunk cost",
        "operationId" : "linkInvoiceToSunkCost2",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "sunkCostId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "sunk cost id to link invoices to"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "array of invoice ids to add to the sunk cost",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "description" : "array of invoice ids to add to the sunk cost"
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/sunk-cost/linkAttachment/{sunkCostId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/sunk-cost/linkAttachment/{sunkCostId}" ],
        "description" : "",
        "operationId" : "linkInvoiceToAttachment2",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "sunkCostId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "sunk cost to which to link"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "attachment to link to the sunk cost",
"type" : "integer",
"format" : "int32"
            },
            "description" : "attachment to link to the sunk cost"
          }
        ],
        "responses" : {
          "201" : {
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/sunk-cost/linked/invoice/{invoiceId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/sunk-cost/linked/invoice/{invoiceId}" ],
        "description" : "",
        "operationId" : "getLinkedSunkCostToInvoice",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "invoiceId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_SunkCostDTO"
            },
            "example" : {
  "date" : "...",
  "name" : "...",
  "costType" : "...",
  "amount" : 12345.0,
  "info" : "...",
  "id" : 12345,
  "supplier" : "...",
  "closed" : true,
  "refNumber" : "...",
  "respPerson" : "...",
  "jobNumber" : "...",
  "costCenter" : "..."
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/sunk-cost/node/{nodeId}" : {
      "post" : {
        "tags" : [ "\/api/{version}/sunk-cost/node/{nodeId}" ],
        "summary" : "Add sunk cost to node.",
        "description" : "Add sunk cost to node",
        "operationId" : "create4",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id"
          },
          {
            "name" : "forseResize",
            "in" : "query",
            "required" : true,
            "type" : "boolean",
            "description" : "set parameter to true to resize the node if required"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_SunkCostDTO"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_SunkCostDTO"
            },
            "example" : {
  "date" : "...",
  "name" : "...",
  "costType" : "...",
  "amount" : 12345.0,
  "info" : "...",
  "id" : 12345,
  "supplier" : "...",
  "closed" : true,
  "refNumber" : "...",
  "respPerson" : "...",
  "jobNumber" : "...",
  "costCenter" : "..."
},
            "description" : ""
          }
        }
      }
      ,
      "get" : {
        "tags" : [ "\/api/{version}/sunk-cost/node/{nodeId}" ],
        "summary" : "Returns sunk costs of node paginated.",
        "description" : "Returns sunk costs of node paginated.",
        "operationId" : "getSunkCostsOfNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id"
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : "not required"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/sunk-cost/unlink/{sunkCostId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/sunk-cost/unlink/{sunkCostId}" ],
        "summary" : "Unlink invoices from sunk cost.",
        "description" : "Unlink invoices from sunk cost",
        "operationId" : "unlinkInvoiceToSunkCost2",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "sunkCostId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "sunk cost id to unlink invoices from"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "array of invoice id to unlink from the sunk cost",
"type" : "array",
"items" : {
  "type" : "integer"
}
            },
            "description" : "array of invoice id to unlink from the sunk cost"
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/sunk-cost/{id}" : {
      "get" : {
        "tags" : [ "\/api/{version}/sunk-cost/{id}" ],
        "description" : "",
        "operationId" : "getSunkCost",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_SunkCostDTO"
            },
            "example" : {
  "date" : "...",
  "name" : "...",
  "costType" : "...",
  "amount" : 12345.0,
  "info" : "...",
  "id" : 12345,
  "supplier" : "...",
  "closed" : true,
  "refNumber" : "...",
  "respPerson" : "...",
  "jobNumber" : "...",
  "costCenter" : "..."
},
            "description" : ""
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/sunk-cost/{id}" ],
        "description" : "",
        "operationId" : "removeSunkCost",
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/sunk-cost/{id}" ],
        "summary" : "Edit sunk cost.",
        "description" : "Edit sunk cost",
        "operationId" : "editSunkCost",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "sunk cost id"
          },
          {
            "name" : "forseResize",
            "in" : "query",
            "required" : true,
            "type" : "boolean",
            "description" : "set parameter to true to resize the node if required"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_SunkCostDTO"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/target-budget/node/{nodeId}" : {
      "post" : {
        "tags" : [ "\/api/{version}/target-budget/node/{nodeId}" ],
        "summary" : "Add target budget to node.",
        "description" : "Add target budget to node",
        "operationId" : "create5",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id"
          },
          {
            "name" : "forceResize",
            "in" : "query",
            "required" : true,
            "type" : "boolean",
            "description" : "set parameter to true to resize the node if required"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_TargetBudgetDTO"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_TargetBudgetDTO"
            },
            "example" : {
  "date" : "...",
  "amount" : 12345.0,
  "id" : 12345,
  "name" : "...",
  "costType" : "..."
},
            "description" : ""
          }
        }
      }
      ,
      "get" : {
        "tags" : [ "\/api/{version}/target-budget/node/{nodeId}" ],
        "summary" : "Returns target budgets of node paginated.",
        "description" : "Returns target budgets of node paginated.",
        "operationId" : "getTargetBudgetsOfNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id"
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : "not required"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/target-budget/{id}" : {
      "get" : {
        "tags" : [ "\/api/{version}/target-budget/{id}" ],
        "description" : "",
        "operationId" : "getTargetBudget",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_TargetBudgetDTO"
            },
            "example" : {
  "date" : "...",
  "amount" : 12345.0,
  "id" : 12345,
  "name" : "...",
  "costType" : "..."
},
            "description" : ""
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/target-budget/{id}" ],
        "description" : "",
        "operationId" : "removeTargetBudget",
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/target-budget/{id}" ],
        "summary" : "Edit target budget.",
        "description" : "Edit target budget",
        "operationId" : "editTargetBudget",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "target budget id"
          },
          {
            "name" : "forceResize",
            "in" : "query",
            "required" : true,
            "type" : "boolean",
            "description" : "set parameter to true to resize the node if required"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_TargetBudgetDTO"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/task/changes" : {
      "get" : {
        "tags" : [ "\/api/{version}/task/changes" ],
        "description" : "",
        "operationId" : "getTasksChanges",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "revision",
            "in" : "query",
            "required" : false,
            "type" : "number",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_TasksRevisionChangesOfTaskDTO"
            },
            "example" : {
  "deleted" : [ 12345, 12345 ],
  "modified" : [ {
    "state" : "OPEN",
    "id" : 12345,
    "markerType" : 12345,
    "jobId" : 12345,
    "nodeId" : 12345,
    "responsibleUser" : {
      "lastName" : "...",
      "login" : "...",
      "firstName" : "...",
      "userId" : 12345
    },
    "name" : "...",
    "info" : "...",
    "date" : "..."
  }, {
    "state" : "PAUSED",
    "id" : 12345,
    "markerType" : 12345,
    "jobId" : 12345,
    "nodeId" : 12345,
    "responsibleUser" : {
      "lastName" : "...",
      "login" : "...",
      "firstName" : "...",
      "userId" : 12345
    },
    "name" : "...",
    "info" : "...",
    "date" : "..."
  } ],
  "revision" : 12345
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/task/node/{nodeId}" : {
      "post" : {
        "tags" : [ "\/api/{version}/task/node/{nodeId}" ],
        "summary" : "Creates task.",
        "description" : "Creates task",
        "operationId" : "create6",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id"
          },
          {
            "name" : "forseResize",
            "in" : "query",
            "required" : true,
            "type" : "boolean",
            "description" : "set parameter to true to resize the node if required"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_TaskDTO"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_TaskDTO"
            },
            "example" : {
  "state" : "CANCELLED",
  "id" : 12345,
  "markerType" : 12345,
  "jobId" : 12345,
  "nodeId" : 12345,
  "responsibleUser" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "name" : "...",
  "info" : "...",
  "date" : "..."
},
            "description" : ""
          }
        }
      }
      ,
      "get" : {
        "tags" : [ "\/api/{version}/task/node/{nodeId}" ],
        "summary" : "Returns tasks and managed tasks of node paginated.",
        "description" : "Returns tasks and managed tasks of node paginated. Sort options are not available",
        "operationId" : "getTasksOfNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id"
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : "not required"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>TaskDTO<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/task/node/{nodeId}/status/{status}/date/{date}" : {
      "get" : {
        "tags" : [ "\/api/{version}/task/node/{nodeId}/status/{status}/date/{date}" ],
        "summary" : "Returns tasks and managed tasks of node by date and status, paginated.",
        "description" : "Returns tasks and managed tasks of node by date and status, paginated. Sort options are not available",
        "operationId" : "getTasksOfNodeByDateStatus",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "date",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : "task date in format yyyy-MM-dd"
          },
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "node id"
          },
          {
            "name" : "status",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : "page status - open,done, etc."
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : "not required"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>TaskDTO<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/task/user-assigned" : {
      "get" : {
        "tags" : [ "\/api/{version}/task/user-assigned" ],
        "summary" : "Returns the tasks of the user where the user is assigned like responsible user.",
        "description" : "Returns the tasks of the user where the user is assigned like responsible user",
        "operationId" : "getAssignedTasks",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "includeStatuses",
            "in" : "query",
            "required" : false,
            "type" : "array",
            "items" : {
            "type" : "string",
            "enum" : ["CANCELLED", "DONE", "IN_PROGRESS", "OPEN", "PAUSED", "PLANNED"]
            },
            "collectionFormat" : "multi",
            "description" : "- optional, Task statuses to be included"
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "treeId",
            "in" : "query",
            "required" : false,
            "type" : "integer",
            "description" : "- optional. If provided, only the nodes within the tree is returned"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>TaskDTO<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/task/{taskId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/task/{taskId}" ],
        "description" : "",
        "operationId" : "getTask",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "taskId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_TaskDTO"
            },
            "example" : {
  "state" : "CANCELLED",
  "id" : 12345,
  "markerType" : 12345,
  "jobId" : 12345,
  "nodeId" : 12345,
  "responsibleUser" : {
    "lastName" : "...",
    "login" : "...",
    "firstName" : "...",
    "userId" : 12345
  },
  "name" : "...",
  "info" : "...",
  "date" : "..."
},
            "description" : ""
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/task/{taskId}" ],
        "summary" : "Remove task.",
        "description" : "Remove task",
        "operationId" : "deleteTask",
        "parameters" : [
          {
            "name" : "taskId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "cancelJob",
            "in" : "query",
            "required" : true,
            "default" : "true",
            "type" : "boolean",
            "description" : "default is true.If the task is managed task and don't want to delete the job manager's job set this param to false"
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/task/{taskId}" ],
        "summary" : "Edit task.",
        "description" : "Edit task",
        "operationId" : "editTask",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "taskId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "task id"
          },
          {
            "name" : "forseResize",
            "in" : "query",
            "required" : true,
            "type" : "boolean",
            "description" : "set parameter to true to resize the node if required"
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_EditTaskRequestBody"
            },
            "description" : "request body\n- for property taskState see allowed values - \"/task/statuses\"\n- for property markerType see allowed values  - \"/marker\""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/tree" : {
      "get" : {
        "tags" : [ "\/api/{version}/tree" ],
        "description" : "",
        "operationId" : "getTrees",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "array of Tree objects",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_TreeDTO"
}
            },
            "example" : [ {
  "id" : 12345,
  "name" : "...",
  "planningType" : "TOP_DOWN",
  "startDate" : "...",
  "endDate" : "...",
  "currencyId" : 12345
} ],
            "description" : "array of Tree objects"
          }
        }
      }
    }
    ,
    "\/api/{version}/user/access/node/{nodeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/user/access/node/{nodeId}" ],
        "summary" : "get users that have READ access to given nodeId.",
        "description" : "get users that have READ access to given nodeId",
        "operationId" : "getUsersAccessibleNode",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "id of node"
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : "not required"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>UserViewBase<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/user/access/task/{taskId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/user/access/task/{taskId}" ],
        "summary" : "get users that have READ access to given taskId.",
        "description" : "get users that have READ access to given taskId",
        "operationId" : "getUsersAccessibleTask",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "taskId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "id of task"
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : "not required"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>UserViewBase<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/user/has-data/{userId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/user/has-data/{userId}" ],
        "summary" : "check if given user has any data in application.",
        "description" : "check if given user has any data in application. This enpoint is just for internal use.\nAllow only 'admin' can use it.",
        "operationId" : "hasUserData",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "userId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "true/false",
"type" : "boolean"
            },
            "description" : "true/false"
          }
        }
      }
    }
    ,
    "\/api/{version}/user/has-module-access" : {
      "get" : {
        "tags" : [ "\/api/{version}/user/has-module-access" ],
        "summary" : "Return if the user has access to Maps module, {'access':true/false}.",
        "description" : "Return if the user has access to Maps module, {'access':true/false}",
        "operationId" : "hasModuleAccess",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "file"
            },
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/user/write/attachments" : {
      "get" : {
        "tags" : [ "\/api/{version}/user/write/attachments" ],
        "description" : "",
        "operationId" : "hasRightToAttach",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "true if the logged user has right to attach to any node",
"type" : "boolean"
            },
            "description" : "true if the logged user has right to attach to any node"
          }
        }
      }
    }
    ,
    "\/api/{version}/usergroups/all" : {
      "get" : {
        "tags" : [ "\/api/{version}/usergroups/all" ],
        "summary" : "Returns All users with assigned user groups,.",
        "description" : "Returns All users with assigned user groups, <userId, list of assigned groups>",
        "operationId" : "getAllGroupsAndUsers",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "Map <userId, List <GroupRolePair>>",
"type" : "object",
"additionalProperties" : {
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_GroupRolePair"
}
}
            },
            "example" : [ {
  "..." : {
    "groupId" : 12345,
    "roleId" : 12345
  }
} ],
            "description" : "Map <userId, List <GroupRolePair>>"
          }
        }
      }
    }
    ,
    "\/api/{version}/usergroups/user/{userId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/usergroups/user/{userId}" ],
        "description" : "",
        "operationId" : "getGroupsForUser",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "userId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_GroupRolePair"
}
            },
            "example" : [ {
  "groupId" : 12345,
  "roleId" : 12345
} ],
            "description" : ""
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "\/api/{version}/usergroups/user/{userId}" ],
        "description" : "",
        "operationId" : "updateGroupsForUser",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "userId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_GroupRolePair"
}
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/view/public/all" : {
      "get" : {
        "tags" : [ "\/api/{version}/view/public/all" ],
        "summary" : "Returns all public views.",
        "description" : "Returns all public views",
        "operationId" : "getPublicViewsWithoutRightCheck2",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_ViewViewBase"
}
            },
            "example" : [ {
  "viewName" : "...",
  "viewId" : 12345
} ],
            "description" : ""
          }
        }
      }
    }
    ,
    "\/api/{version}/watcher/node/{nodeId}" : {
      "get" : {
        "tags" : [ "\/api/{version}/watcher/node/{nodeId}" ],
        "summary" : "Returns all watchers on an element.",
        "description" : "Returns all watchers on an element",
        "operationId" : "getWatchers",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "- id of element"
          },
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : "- optional"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>UserViewBase<\/code>"
          }
        }
      }
    }
    ,
    "\/api/{version}/watcher/node/{nodeId}/user/{userId}" : {
      "put" : {
        "tags" : [ "\/api/{version}/watcher/node/{nodeId}/user/{userId}" ],
        "summary" : "Returns all elements that a user is watching\nAdd a user to watch an element.",
        "description" : "Returns all elements that a user is watching\nAdd a user to watch an element. If the user has no right MANAGE_WATCHERS and is not adding his own id exception will be thrown",
        "operationId" : "add",
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "- id of element to watch"
          },
          {
            "name" : "userId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "- id of user"
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "\/api/{version}/watcher/node/{nodeId}/user/{userId}" ],
        "summary" : "Remove a user from watching an element.",
        "description" : "Remove a user from watching an element. If the user has no right MANAGE_WATCHERS and is not removing his own id exception will be thrown",
        "operationId" : "delete",
        "parameters" : [
          {
            "name" : "nodeId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "- id of element to watch"
          },
          {
            "name" : "userId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "description" : "- id of user"
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/api/{version}/watcher/user-assigned" : {
      "get" : {
        "tags" : [ "\/api/{version}/watcher/user-assigned" ],
        "summary" : "Returns all elements that a user watches.",
        "description" : "Returns all elements that a user watches",
        "operationId" : "getElements",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [
          {
            "name" : "offset",
            "in" : "query",
            "required" : false,
            "default" : "0",
            "type" : "integer",
            "description" : "optional"
          },
          {
            "name" : "treeId",
            "in" : "query",
            "required" : false,
            "type" : "integer",
            "description" : "optional - for which tree id to return elements"
          },
          {
            "name" : "withAdditionalInfo",
            "in" : "query",
            "required" : true,
            "default" : "false",
            "type" : "boolean",
            "description" : "not required. If param exists with return <code>NodeDTO<\/code> with filled all fields"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_PageResource"
            },
            "example" : {
  "content" : [ { }, { } ],
  "totalElements" : 12345,
  "limit" : 12345,
  "offset" : 12345,
  "sort" : {
    "unsorted" : true,
    "sorted" : true
  },
  "numberOfElements" : 12345,
  "pageNumber" : 12345
},
            "description" : "Page with <code>NodeDTO<\/code>"
          }
        }
      }
    }
  }
}
